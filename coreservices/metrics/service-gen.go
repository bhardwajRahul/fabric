/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

This file and the project encapsulating it are the confidential intellectual property of Microbus LLC.
Neither may be used, copied or distributed without the express written consent of Microbus LLC.
*/

// Code generated by Microbus. DO NOT EDIT.

/*
Package metrics implements the metrics.sys microservice.

The Metrics service is a core microservice that aggregates metrics from other microservices and makes them available for collection.
*/
package metrics

import (
	"context"
	"net/http"
	"time"

	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/service"

	"github.com/microbus-io/fabric/coreservices/metrics/intermediate"
	"github.com/microbus-io/fabric/coreservices/metrics/metricsapi"
)

var (
	_ context.Context
	_ *http.Request
	_ time.Duration
	_ service.Service
	_ *errors.TracedError
	_ *metricsapi.Client
)

// HostName is the default host name of the microservice: metrics.sys.
const HostName = "metrics.sys"

// NewService creates a new metrics.sys microservice.
func NewService() service.Service {
	s := &Service{}
	s.Intermediate = intermediate.NewService(s, Version)
	return s
}

// Mock is a mockable version of the metrics.sys microservice,
// allowing functions, sinks and web handlers to be mocked.
type Mock = intermediate.Mock

// New creates a new mockable version of the microservice.
func NewMock() *Mock {
	return intermediate.NewMock(Version)
}

// Config initializers
var (
	_ int
	// SecretKey initializes the SecretKey config property of the microservice
	SecretKey = intermediate.SecretKey
)
