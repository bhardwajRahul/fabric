/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

This file and the project encapsulating it are the confidential intellectual property of Microbus LLC.
Neither may be used, copied or distributed without the express written consent of Microbus LLC.
*/

// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"context"
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/sub"

	"github.com/microbus-io/fabric/coreservices/control/controlapi"
)

var (
	_ context.Context
	_ *json.Decoder
	_ *http.Request
	_ strings.Builder
	_ time.Duration
	_ *errors.TracedError
	_ *httpx.ResponseRecorder
	_ sub.Option
	_ controlapi.Client
)

// Mock is a mockable version of the control.sys microservice, allowing functions, event sinks and web handlers to be mocked.
type Mock struct {
	*Intermediate
	mockPing func(ctx context.Context) (pong int, err error)
	mockConfigRefresh func(ctx context.Context) (err error)
	mockTrace func(ctx context.Context, id string) (err error)
}

// NewMock creates a new mockable version of the microservice.
func NewMock() *Mock {
	m := &Mock{}
	m.Intermediate = NewService(m, 7357) // Stands for TEST
	return m
}

// OnStartup makes sure that the mock is not executed in a non-dev environment.
func (svc *Mock) OnStartup(ctx context.Context) (err error) {
	if svc.Deployment() != connector.LOCAL && svc.Deployment() != connector.TESTING {
		return errors.Newf("mocking disallowed in '%s' deployment", svc.Deployment())
	}
	return nil
}

// OnShutdown is a no op.
func (svc *Mock) OnShutdown(ctx context.Context) (err error) {
	return nil
}

// MockPing sets up a mock handler for the Ping endpoint.
func (svc *Mock) MockPing(handler func(ctx context.Context) (pong int, err error)) *Mock {
	svc.mockPing = handler
	return svc
}

// Ping runs the mock handler set by MockPing.
func (svc *Mock) Ping(ctx context.Context) (pong int, err error) {
	if svc.mockPing == nil {
		err = errors.New("mocked endpoint 'Ping' not implemented")
		return
	}
	return svc.mockPing(ctx)
}

// MockConfigRefresh sets up a mock handler for the ConfigRefresh endpoint.
func (svc *Mock) MockConfigRefresh(handler func(ctx context.Context) (err error)) *Mock {
	svc.mockConfigRefresh = handler
	return svc
}

// ConfigRefresh runs the mock handler set by MockConfigRefresh.
func (svc *Mock) ConfigRefresh(ctx context.Context) (err error) {
	if svc.mockConfigRefresh == nil {
		err = errors.New("mocked endpoint 'ConfigRefresh' not implemented")
		return
	}
	return svc.mockConfigRefresh(ctx)
}

// MockTrace sets up a mock handler for the Trace endpoint.
func (svc *Mock) MockTrace(handler func(ctx context.Context, id string) (err error)) *Mock {
	svc.mockTrace = handler
	return svc
}

// Trace runs the mock handler set by MockTrace.
func (svc *Mock) Trace(ctx context.Context, id string) (err error) {
	if svc.mockTrace == nil {
		err = errors.New("mocked endpoint 'Trace' not implemented")
		return
	}
	return svc.mockTrace(ctx, id)
}
