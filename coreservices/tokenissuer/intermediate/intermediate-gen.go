/*
Copyright (c) 2023-2025 Microbus LLC and various contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Microbus. DO NOT EDIT.

/*
Package intermediate serves as the foundation of the tokenissuer.core microservice.

The token issuer microservice generates and validates JWTs.
*/
package intermediate

import (
	"context"
	"embed"
	"encoding/json"
	"fmt"
	"net/http"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/microbus-io/fabric/cfg"
	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/frame"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/openapi"
	"github.com/microbus-io/fabric/service"
	"github.com/microbus-io/fabric/sub"
	"github.com/microbus-io/fabric/utils"

	"gopkg.in/yaml.v3"

	"github.com/microbus-io/fabric/coreservices/tokenissuer/resources"
	"github.com/microbus-io/fabric/coreservices/tokenissuer/tokenissuerapi"
)

var (
	_ context.Context
	_ *embed.FS
	_ *json.Decoder
	_ fmt.Stringer
	_ *http.Request
	_ filepath.WalkFunc
	_ strconv.NumError
	_ strings.Reader
	_ time.Duration
	_ cfg.Option
	_ *errors.TracedError
	_ frame.Frame
	_ *httpx.ResponseRecorder
	_ *openapi.Service
	_ service.Service
	_ sub.Option
	_ utils.SyncMap[string, string]
	_ yaml.Encoder
	_ tokenissuerapi.Client
)

// ToDo defines the interface that the microservice must implement.
// The intermediate delegates handling to this interface.
type ToDo interface {
	OnStartup(ctx context.Context) (err error)
	OnShutdown(ctx context.Context) (err error)
	IssueToken(ctx context.Context, claims any) (signedToken string, err error)
	ValidateToken(ctx context.Context, signedToken string) (actor any, valid bool, err error)
}

// Intermediate extends and customizes the generic base connector.
// Code generated microservices then extend the intermediate.
type Intermediate struct {
	*connector.Connector
	impl ToDo
}

// NewService creates a new intermediate service.
func NewService(impl ToDo, version int) *Intermediate {
	svc := &Intermediate{
		Connector: connector.New("tokenissuer.core"),
		impl: impl,
	}
	svc.SetVersion(version)
	svc.SetDescription(`The token issuer microservice generates and validates JWTs.`)
	
	// Lifecycle
	svc.SetOnStartup(svc.impl.OnStartup)
	svc.SetOnShutdown(svc.impl.OnShutdown)

	// Configs
	svc.SetOnConfigChanged(svc.doOnConfigChanged)
	svc.DefineConfig(
		"AuthTokenTTL",
		cfg.Description(`AuthTokenTTL sets the TTL of the JWT.`),
		cfg.Validation(`dur [1m,]`),
		cfg.DefaultValue(`720h`),
	)
	svc.DefineConfig(
		"SecretKey",
		cfg.Description(`SecretKey is a symmetrical key used to sign and validate the JWT when using the HMAC-SHA algorithm.`),
		cfg.Secret(),
	)
	svc.DefineConfig(
		"AltSecretKey",
		cfg.Description(`AltSecretKey is an alternative key used to validate the JWT when using the HMAC-SHA algorithm.
Setting the previous secret key as an alternative key is useful when rotating keys.`),
		cfg.Secret(),
	)

	// OpenAPI
	svc.Subscribe("GET", `:0/openapi.json`, svc.doOpenAPI)	

	// Functions
	svc.Subscribe(`ANY`, `:444/issue-token`, svc.doIssueToken)
	svc.Subscribe(`ANY`, `:444/validate-token`, svc.doValidateToken)

	// Resources file system
	svc.SetResFS(resources.FS)

	return svc
}

// doOpenAPI renders the OpenAPI document of the microservice.
func (svc *Intermediate) doOpenAPI(w http.ResponseWriter, r *http.Request) error {
	oapiSvc := openapi.Service{
		ServiceName: svc.Hostname(),
		Description: svc.Description(),
		Version:     svc.Version(),
		Endpoints:   []*openapi.Endpoint{},
		RemoteURI:   frame.Of(r).XForwardedFullURL(),
	}
	if r.URL.Port() == "444" || "444" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `IssueToken`,
			Method:      `ANY`,
			Path:        `:444/issue-token`,
			Summary:     `IssueToken(claims any) (signedToken string)`,
			Description: `IssueToken generates a new JWT with a set of claims.
The claims must be provided as a jwt.MapClaims or an object that can be JSON encoded.
See https://www.iana.org/assignments/jwt/jwt.xhtml for a list of the common claim names.`,
			InputArgs: struct {
				Claims any `json:"claims"`
			}{},
			OutputArgs: struct {
				SignedToken string `json:"signedToken"`
			}{},
		})
	}
	if r.URL.Port() == "444" || "444" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `ValidateToken`,
			Method:      `ANY`,
			Path:        `:444/validate-token`,
			Summary:     `ValidateToken(signedToken string) (actor any, valid bool)`,
			Description: `ValidateToken validates a JWT previously generated by this issuer and returns the actor associated with it.`,
			InputArgs: struct {
				SignedToken string `json:"signedToken"`
			}{},
			OutputArgs: struct {
				Actor any `json:"actor"`
				Valid bool `json:"valid"`
			}{},
		})
	}

	if len(oapiSvc.Endpoints) == 0 {
		w.WriteHeader(http.StatusNotFound)
		return nil
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "  ")
	}
	err := encoder.Encode(&oapiSvc)
	return errors.Trace(err)
}

// doOnConfigChanged is called when the config of the microservice changes.
func (svc *Intermediate) doOnConfigChanged(ctx context.Context, changed func(string) bool) (err error) {
	return nil
}

/*
AuthTokenTTL sets the TTL of the JWT.
*/
func (svc *Intermediate) AuthTokenTTL() (ttl time.Duration) {
	_val := svc.Config("AuthTokenTTL")
	_dur, _ := time.ParseDuration(_val)
	return _dur
}

/*
SetAuthTokenTTL sets the value of the configuration property.
This action is restricted to the TESTING deployment in which the fetching of values from the configurator is disabled.

AuthTokenTTL sets the TTL of the JWT.
*/
func (svc *Intermediate) SetAuthTokenTTL(ttl time.Duration) error {
	return svc.SetConfig("AuthTokenTTL", utils.AnyToString(ttl))
}

/*
SecretKey is a symmetrical key used to sign and validate the JWT when using the HMAC-SHA algorithm.
*/
func (svc *Intermediate) SecretKey() (key string) {
	_val := svc.Config("SecretKey")
	return _val
}

/*
SetSecretKey sets the value of the configuration property.
This action is restricted to the TESTING deployment in which the fetching of values from the configurator is disabled.

SecretKey is a symmetrical key used to sign and validate the JWT when using the HMAC-SHA algorithm.
*/
func (svc *Intermediate) SetSecretKey(key string) error {
	return svc.SetConfig("SecretKey", utils.AnyToString(key))
}

/*
AltSecretKey is an alternative key used to validate the JWT when using the HMAC-SHA algorithm.
Setting the previous secret key as an alternative key is useful when rotating keys.
*/
func (svc *Intermediate) AltSecretKey() (key string) {
	_val := svc.Config("AltSecretKey")
	return _val
}

/*
SetAltSecretKey sets the value of the configuration property.
This action is restricted to the TESTING deployment in which the fetching of values from the configurator is disabled.

AltSecretKey is an alternative key used to validate the JWT when using the HMAC-SHA algorithm.
Setting the previous secret key as an alternative key is useful when rotating keys.
*/
func (svc *Intermediate) SetAltSecretKey(key string) error {
	return svc.SetConfig("AltSecretKey", utils.AnyToString(key))
}

// doIssueToken handles marshaling for the IssueToken function.
func (svc *Intermediate) doIssueToken(w http.ResponseWriter, r *http.Request) error {
	var i tokenissuerapi.IssueTokenIn
	var o tokenissuerapi.IssueTokenOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:444/issue-token`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:444/issue-token`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.SignedToken, err = svc.impl.IssueToken(
		r.Context(),
		i.Claims,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "  ")
	}
	err = encoder.Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doValidateToken handles marshaling for the ValidateToken function.
func (svc *Intermediate) doValidateToken(w http.ResponseWriter, r *http.Request) error {
	var i tokenissuerapi.ValidateTokenIn
	var o tokenissuerapi.ValidateTokenOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:444/validate-token`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:444/validate-token`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.Actor, o.Valid, err = svc.impl.ValidateToken(
		r.Context(),
		i.SignedToken,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "  ")
	}
	err = encoder.Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}
