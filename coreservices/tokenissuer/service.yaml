# Copyright (c) 2023-2025 Microbus LLC and various contributors
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# 	http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
# General
#
# host - The hostname of the microservice
# description - A human-friendly description of the microservice
# integrationTests - Whether or not to generate integration tests (defaults to true)
# openApi - Whether or not to generate an OpenAPI document at openapi.json (defaults to true)
general:
  host: tokenissuer.core
  description: The token issuer microservice generates and validates JWTs.

# Config properties
#
# signature - Go-style method signature (no arguments, one return value)
#   MyConfig() (myConfig int) - string, int, bool, duration or float types
# description - Documentation
# default - A default value (defaults to empty)
# validation - A validation pattern
#   str ^[a-zA-Z0-9]+$
#   bool
#   int [0,60]
#   float [0.0,1.0)
#   dur (0s,24h]
#   set Red|Green|Blue
#   url
#   email
#   json
# callback - Whether or not to handle the change event (defaults to false)
# secret - Whether or not this is a secret (defaults to false)
configs:
  - signature: AuthTokenTTL() (ttl time.Duration)
    description: AuthTokenTTL sets the TTL of the JWT.
    default: 720h
    validation: dur [1m,]
  - signature: SecretKey() (key string)
    description: SecretKey is a symmetrical key used to sign and validate the JWT when using the HMAC-SHA algorithm.
    secret: true
  - signature: AltSecretKey() (key string)
    description: |-
      AltSecretKey is an alternative key used to validate the JWT when using the HMAC-SHA algorithm.
      Setting the previous secret key as an alternative key is useful when rotating keys.
    secret: true

# Functions
#
# signature - Go-style method signature
#   MyFunc(s string, f float64, i int, b bool) (t time.Time, d time.Duration)
#   MyFunc(val Complex, ptr *Complex)
#   MyFunc(m1 map[string]int, m2 map[string]*Complex) (a1 []int, a2 []*Complex)
#   MyFunc(httpRequestBody *Complex, queryArg int, pathArg string) (httpResponseBody []string, httpStatusCode int)
# description - Documentation
# method - "GET", "POST", etc. or "ANY" (default)
# path - The URL path of the subscription, relative to the hostname of the microservice
#   (empty) - The function name in kebab-case (default)
#   /path - Default port :443
#   /directory/{filename+} - Greedy path argument
#   /article/{aid}/comment/{cid} - Path arguments
#   :443/path
#   :443/... - Ellipsis denotes the function name in kebab-case
#   :443 - Root path of the microservice
#   :0/path - Any port
#   //example.com:443/path
#   https://example.com:443/path
#   //root - Root path of the web server
# queue - The subscription queue
#   default - Load balanced (default)
#   none - Pervasive
# actor - Authorization requirements as a boolean expression over actor properties
# openApi - Whether or not to include this endpoint in the OpenAPI document (defaults to true)
functions:
  - signature: IssueToken(claims any) (signedToken string)
    description: |-
      IssueToken generates a new JWT with a set of claims.
      The claims must be provided as a jwt.MapClaims or an object that can be JSON encoded.
      See https://www.iana.org/assignments/jwt/jwt.xhtml for a list of the common claim names.
    path: :444/...
  - signature: ValidateToken(signedToken string) (actor any, valid bool)
    description: ValidateToken validates a JWT previously generated by this issuer and returns the actor associated with it.
    path: :444/...

# Event sources
#
# signature - Go-style method signature
#   OnMyEvent(s string, f float64, i int, b bool) (t time.Time, d time.Duration)
#   OnMyEvent(val Complex, ptr *Complex)
#   OnMyEvent(m1 map[string]int, m2 map[string]*Complex) (a1 []int, a2 []*Complex)
#   OnMyEvent(httpRequestBody *Complex, queryArg int, pathArg string) (httpResponseBody []string, httpStatusCode int)
# description - Documentation
# method - "GET", "POST", etc. (defaults to "POST")
# path - The URL path of the subscription, relative to the hostname of the microservice
#   (empty) - The function name in kebab-case (default)
#   /path - Default port :417
#   /directory/{filename+} - Greedy path argument
#   /article/{aid}/comment/{cid} - Path arguments
#   :417/path
#   :417/... - Ellipsis denotes the function name in kebab-case
#   :417 - Root path of the microservice
#   //example.com:417/path
#   https://example.com:417/path
#   //root - Root path of the web server
events:
  # - signature:
  #   description:

# Event sinks
#
# signature - Go-style method signature
#   OnMyEvent(s string, f float64, i int, b bool) (t time.Time, d time.Duration)
#   OnMyEvent(val Complex, ptr *Complex)
#   OnMyEvent(m1 map[string]int, m2 map[string]*Complex) (a1 []int, a2 []*Complex)
#   OnMyEvent(httpRequestBody *Complex, queryArg int, pathArg string) (httpResponseBody []string, httpStatusCode int)
# description - Documentation
# event - The name of the event at the source (defaults to the function name)
# source - The package path of the microservice that is the source of the event
# forHost - For an event source with an overridden hostname
# queue - The subscription queue
#   default - Load balanced (default)
#   none - Pervasive
# actor - Authorization requirements as a boolean expression over actor properties
sinks:
  # - signature:
  #   description:
  #   source: package/path/of/another/microservice

# Web handlers
#
# signature - Go-style method signature (no arguments or return values)
#   MyHandler()
# description - Documentation
# method - "GET", "POST", etc. or "ANY" (default)
# path - The URL path of the subscription, relative to the hostname of the microservice
#   (empty) - The function name in kebab-case (default)
#   /path - Default port :443
#   /directory/{filename+} - Greedy path argument
#   /article/{aid}/comment/{cid} - Path arguments
#   :443/path
#   :443/... - Ellipsis denotes the function name in kebab-case
#   :443 - Root path of the microservice
#   :0/path - Any port
#   //example.com:443/path
#   https://example.com:443/path
#   //root - Root path of the web server
# queue - The subscription queue
#   default - Load balanced (default)
#   none - Pervasive
# actor - Authorization requirements as a boolean expression over actor properties
# openApi - Whether or not to include this endpoint in the OpenAPI document (defaults to true)
webs:
  # - signature:
  #   description:

# Tickers
#
# signature - Go-style method signature (no arguments or return values)
#   MyTicker()
# description - Documentation
# interval - Duration between iterations (e.g. 15m)
tickers:
  # - signature:
  #   description:
  #   interval:

# Metrics
#
# signature - Go-style method signature (numeric measure and labels for arguments, no return value)
#   MyMetric(measure float64) - int, float or duration measure argument
#   MyMetric(measure int, label1 string, label2 int, label3 bool) - labels of any type
#   MyMetricSeconds(dur time.Duration) - time unit name as suffix
#   MyMetricMegaBytes(mb float64) - byte size unit name as suffix
# description - Documentation
# kind - The kind of the metric, "counter" (default), "gauge" or "histogram"
# buckets - Bucket boundaries for histograms [x,y,z,...]
# alias - The name of the OpenTelemetry metric (defaults to module_package_function_name)
# callback - Whether or not to observe the metric just in time (defaults to false)
metrics:
  # - signature:
  #   description:
  #   kind:
