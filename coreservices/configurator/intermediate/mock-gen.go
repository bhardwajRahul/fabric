/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

This file and the project encapsulating it are the confidential intellectual property of Microbus LLC.
Neither may be used, copied or distributed without the express written consent of Microbus LLC.
*/

// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"context"
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/sub"

	"github.com/microbus-io/fabric/coreservices/configurator/configuratorapi"
)

var (
	_ context.Context
	_ *json.Decoder
	_ *http.Request
	_ strings.Builder
	_ time.Duration
	_ *errors.TracedError
	_ *httpx.ResponseRecorder
	_ sub.Option
	_ configuratorapi.Client
)

// Mock is a mockable version of the configurator.sys microservice, allowing functions, event sinks and web handlers to be mocked.
type Mock struct {
	*Intermediate
	mockValues func(ctx context.Context, names []string) (values map[string]string, err error)
	mockRefresh func(ctx context.Context) (err error)
	mockSync func(ctx context.Context, timestamp time.Time, values map[string]map[string]string) (err error)
}

// NewMock creates a new mockable version of the microservice.
func NewMock() *Mock {
	m := &Mock{}
	m.Intermediate = NewService(m, 7357) // Stands for TEST
	return m
}

// OnStartup makes sure that the mock is not executed in a non-dev environment.
func (svc *Mock) OnStartup(ctx context.Context) (err error) {
	if svc.Deployment() != connector.LOCAL && svc.Deployment() != connector.TESTING {
		return errors.Newf("mocking disallowed in '%s' deployment", svc.Deployment())
	}
	return nil
}

// OnShutdown is a no op.
func (svc *Mock) OnShutdown(ctx context.Context) (err error) {
	return nil
}

// MockValues sets up a mock handler for the Values endpoint.
func (svc *Mock) MockValues(handler func(ctx context.Context, names []string) (values map[string]string, err error)) *Mock {
	svc.mockValues = handler
	return svc
}

// Values runs the mock handler set by MockValues.
func (svc *Mock) Values(ctx context.Context, names []string) (values map[string]string, err error) {
	if svc.mockValues == nil {
		err = errors.New("mocked endpoint 'Values' not implemented")
		return
	}
	return svc.mockValues(ctx, names)
}

// MockRefresh sets up a mock handler for the Refresh endpoint.
func (svc *Mock) MockRefresh(handler func(ctx context.Context) (err error)) *Mock {
	svc.mockRefresh = handler
	return svc
}

// Refresh runs the mock handler set by MockRefresh.
func (svc *Mock) Refresh(ctx context.Context) (err error) {
	if svc.mockRefresh == nil {
		err = errors.New("mocked endpoint 'Refresh' not implemented")
		return
	}
	return svc.mockRefresh(ctx)
}

// MockSync sets up a mock handler for the Sync endpoint.
func (svc *Mock) MockSync(handler func(ctx context.Context, timestamp time.Time, values map[string]map[string]string) (err error)) *Mock {
	svc.mockSync = handler
	return svc
}

// Sync runs the mock handler set by MockSync.
func (svc *Mock) Sync(ctx context.Context, timestamp time.Time, values map[string]map[string]string) (err error) {
	if svc.mockSync == nil {
		err = errors.New("mocked endpoint 'Sync' not implemented")
		return
	}
	return svc.mockSync(ctx, timestamp, values)
}

// PeriodicRefresh is a no op.
func (svc *Mock) PeriodicRefresh(ctx context.Context) (err error) {
	return nil
}
