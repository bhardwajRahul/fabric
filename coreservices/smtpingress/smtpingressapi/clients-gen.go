/*
Copyright (c) 2023-2025 Microbus LLC and various contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Microbus. DO NOT EDIT.

/*
Package smtpingressapi implements the public API of the smtp.ingress.core microservice,
including clients and data structures.

The SMTP ingress microservice listens for incoming emails and fires corresponding events.
*/
package smtpingressapi

import (
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/pub"
	"github.com/microbus-io/fabric/service"
)

var (
	_ context.Context
	_ *json.Decoder
	_ io.Reader
	_ *http.Request
	_ *url.URL
	_ strings.Reader
	_ time.Duration
	_ *errors.TracedError
	_ *httpx.BodyReader
	_ pub.Option
)

// Hostname is the default hostname of the microservice: smtp.ingress.core.
const Hostname = "smtp.ingress.core"

// Fully-qualified URLs of the microservice's endpoints.
var (
)

// Client is a lightweight proxy for making unicast calls to the smtp.ingress.core microservice.
type Client struct {
	svc  service.Publisher
	host string
	opts []pub.Option
}

// NewClient creates a new unicast client proxy to the smtp.ingress.core microservice.
func NewClient(caller service.Publisher) Client {
	return Client{
		svc:  caller,
		host: "smtp.ingress.core",
	}
}

// ForHost returns a copy of the client with a different hostname to be applied to requests.
func (_c Client) ForHost(host string) Client {
	return Client{
		svc:  _c.svc,
		host: host,
		opts: _c.opts,
	}
}

// WithOptions returns a copy of the client with options to be applied to requests.
func (_c Client) WithOptions(opts ...pub.Option) Client {
	return Client{
		svc:  _c.svc,
		host: _c.host,
		opts: append(_c.opts, opts...),
	}
}

// MulticastClient is a lightweight proxy for making multicast calls to the smtp.ingress.core microservice.
type MulticastClient struct {
	svc  service.Publisher
	host string
	opts []pub.Option
}

// NewMulticastClient creates a new multicast client proxy to the smtp.ingress.core microservice.
func NewMulticastClient(caller service.Publisher) MulticastClient {
	return MulticastClient{
		svc:  caller,
		host: "smtp.ingress.core",
	}
}

// ForHost returns a copy of the client with a different hostname to be applied to requests.
func (_c MulticastClient) ForHost(host string) MulticastClient {
	return MulticastClient{
		svc:  _c.svc,
		host: host,
		opts: _c.opts,
	}
}

// WithOptions returns a copy of the client with options to be applied to requests.
func (_c MulticastClient) WithOptions(opts ...pub.Option) MulticastClient {
	return MulticastClient{
		svc:  _c.svc,
		host: _c.host,
		opts: append(_c.opts, opts...),
	}
}

// MulticastTrigger is a lightweight proxy for triggering the events of the smtp.ingress.core microservice.
type MulticastTrigger struct {
	svc  service.Publisher
	host string
	opts []pub.Option
}

// NewMulticastTrigger creates a new multicast trigger of events of the smtp.ingress.core microservice.
func NewMulticastTrigger(caller service.Publisher) MulticastTrigger {
	return MulticastTrigger{
		svc:  caller,
		host: "smtp.ingress.core",
	}
}

// ForHost returns a copy of the trigger with a different hostname to be applied to requests.
func (_c MulticastTrigger) ForHost(host string) MulticastTrigger {
	return MulticastTrigger{
		svc:  _c.svc,
		host: host,
		opts: _c.opts,
	}
}

// WithOptions returns a copy of the trigger with options to be applied to requests.
func (_c MulticastTrigger) WithOptions(opts ...pub.Option) MulticastTrigger {
	return MulticastTrigger{
		svc:  _c.svc,
		host: _c.host,
		opts: append(_c.opts, opts...),
	}
}

// Hook assists in the subscription to the events of the smtp.ingress.core microservice.
type Hook struct {
	svc  service.Subscriber
	host string
}

// NewHook creates a new hook to the events of the smtp.ingress.core microservice.
func NewHook(listener service.Subscriber) Hook {
	return Hook{
		svc:  listener,
		host: "smtp.ingress.core",
	}
}

// ForHost returns a copy of the hook with a different hostname to be applied to the subscription.
func (_c Hook) ForHost(host string) Hook {
	return Hook{
		svc:  _c.svc,
		host: host,
	}
}

// OnIncomingEmailIn are the input arguments of OnIncomingEmail.
type OnIncomingEmailIn struct {
	MailMessage *Email `json:"mailMessage"`
}

// OnIncomingEmailOut are the return values of OnIncomingEmail.
type OnIncomingEmailOut struct {
}

// OnIncomingEmailResponse is the response to OnIncomingEmail.
type OnIncomingEmailResponse struct {
	data OnIncomingEmailOut
	HTTPResponse *http.Response
	err error
}

// Get retrieves the return values.
func (_out *OnIncomingEmailResponse) Get() (err error) {
	err = _out.err
	return
}

/*
OnIncomingEmail is triggered when a new email message is received.
*/
func (_c MulticastTrigger) OnIncomingEmail(ctx context.Context, mailMessage *Email) <-chan *OnIncomingEmailResponse {
	_url := httpx.JoinHostAndPath(_c.host, `:417/on-incoming-email`)
	_url = httpx.InsertPathArguments(_url, httpx.QArgs{
		`mailMessage`: mailMessage,
	})
	_in := OnIncomingEmailIn{
		mailMessage,
	}
	var _query url.Values
	_body := _in
	_ch := _c.svc.Publish(
		ctx,
		pub.Method(`POST`),
		pub.URL(_url),
		pub.Query(_query),
		pub.Body(_body),
		pub.Options(_c.opts...),
	)

	_res := make(chan *OnIncomingEmailResponse, cap(_ch))
	for _i := range _ch {
		var _r OnIncomingEmailResponse
		_httpRes, _err := _i.Get()
		_r.HTTPResponse = _httpRes
		if _err != nil {
			_r.err = _err // No trace
		} else {
			_err = json.NewDecoder(_httpRes.Body).Decode(&(_r.data))
			if _err != nil {
				_r.err = errors.Trace(_err)
			}
		}
		_res <- &_r
	}
	close(_res)
	return _res
}

/*
OnIncomingEmail is triggered when a new email message is received.
*/
func (_c Hook) OnIncomingEmail(handler func(ctx context.Context, mailMessage *Email) (err error)) error {
	doOnIncomingEmail := func(w http.ResponseWriter, r *http.Request) error {
		var i OnIncomingEmailIn
		var o OnIncomingEmailOut
		if strings.ContainsAny(`:417/on-incoming-email`, "{}") {
			pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:417/on-incoming-email`), r.URL.Path)
			if err != nil {
				return errors.Trace(err)
			}
			err = httpx.DecodeDeepObject(pathArgs, &i)
			if err != nil {
				return errors.Trace(err)
			}
		}
		err := httpx.ParseRequestData(r, &i)
		if err != nil {
			return errors.Trace(err)
		}
		err = handler(
			r.Context(),
			i.MailMessage,
		)
		if err != nil {
			return err // No trace
		}
		w.Header().Set("Content-Type", "application/json")
		encoder := json.NewEncoder(w)
		err = encoder.Encode(o)
		if err != nil {
			return errors.Trace(err)
		}
		return nil
	}
	path := httpx.JoinHostAndPath(_c.host, `:417/on-incoming-email`)
	if handler == nil {
		return _c.svc.Unsubscribe(`POST`, path)
	}
	return _c.svc.Subscribe(`POST`, path, doOnIncomingEmail)
}
