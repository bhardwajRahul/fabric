/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

This file and the project encapsulating it are the confidential intellectual property of Microbus LLC.
Neither may be used, copied or distributed without the express written consent of Microbus LLC.
*/

// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"context"
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/sub"

	"github.com/microbus-io/fabric/examples/calculator/calculatorapi"
)

var (
	_ context.Context
	_ *json.Decoder
	_ *http.Request
	_ strings.Builder
	_ time.Duration
	_ *errors.TracedError
	_ *httpx.ResponseRecorder
	_ sub.Option
	_ calculatorapi.Client
)

// Mock is a mockable version of the calculator.example microservice, allowing functions, event sinks and web handlers to be mocked.
type Mock struct {
	*Intermediate
	mockArithmetic func(ctx context.Context, x int, op string, y int) (xEcho int, opEcho string, yEcho int, result int, err error)
	mockSquare func(ctx context.Context, x int) (xEcho int, result int, err error)
	mockDistance func(ctx context.Context, p1 calculatorapi.Point, p2 calculatorapi.Point) (d float64, err error)
}

// NewMock creates a new mockable version of the microservice.
func NewMock() *Mock {
	m := &Mock{}
	m.Intermediate = NewService(m, 7357) // Stands for TEST
	return m
}

// OnStartup makes sure that the mock is not executed in a non-dev environment.
func (svc *Mock) OnStartup(ctx context.Context) (err error) {
	if svc.Deployment() != connector.LOCAL && svc.Deployment() != connector.TESTING {
		return errors.Newf("mocking disallowed in '%s' deployment", svc.Deployment())
	}
	return nil
}

// OnShutdown is a no op.
func (svc *Mock) OnShutdown(ctx context.Context) (err error) {
	return nil
}

// MockArithmetic sets up a mock handler for the Arithmetic endpoint.
func (svc *Mock) MockArithmetic(handler func(ctx context.Context, x int, op string, y int) (xEcho int, opEcho string, yEcho int, result int, err error)) *Mock {
	svc.mockArithmetic = handler
	return svc
}

// Arithmetic runs the mock handler set by MockArithmetic.
func (svc *Mock) Arithmetic(ctx context.Context, x int, op string, y int) (xEcho int, opEcho string, yEcho int, result int, err error) {
	if svc.mockArithmetic == nil {
		err = errors.New("mocked endpoint 'Arithmetic' not implemented")
		return
	}
	return svc.mockArithmetic(ctx, x, op, y)
}

// MockSquare sets up a mock handler for the Square endpoint.
func (svc *Mock) MockSquare(handler func(ctx context.Context, x int) (xEcho int, result int, err error)) *Mock {
	svc.mockSquare = handler
	return svc
}

// Square runs the mock handler set by MockSquare.
func (svc *Mock) Square(ctx context.Context, x int) (xEcho int, result int, err error) {
	if svc.mockSquare == nil {
		err = errors.New("mocked endpoint 'Square' not implemented")
		return
	}
	return svc.mockSquare(ctx, x)
}

// MockDistance sets up a mock handler for the Distance endpoint.
func (svc *Mock) MockDistance(handler func(ctx context.Context, p1 calculatorapi.Point, p2 calculatorapi.Point) (d float64, err error)) *Mock {
	svc.mockDistance = handler
	return svc
}

// Distance runs the mock handler set by MockDistance.
func (svc *Mock) Distance(ctx context.Context, p1 calculatorapi.Point, p2 calculatorapi.Point) (d float64, err error) {
	if svc.mockDistance == nil {
		err = errors.New("mocked endpoint 'Distance' not implemented")
		return
	}
	return svc.mockDistance(ctx, p1, p2)
}
