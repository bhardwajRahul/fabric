/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

This file and the project encapsulating it are the confidential intellectual property of Microbus LLC.
Neither may be used, copied or distributed without the express written consent of Microbus LLC.
*/

// Code generated by Microbus. DO NOT EDIT.

package intermediate

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/sub"

	"github.com/microbus-io/fabric/examples/directory/directoryapi"
)

var (
	_ context.Context
	_ *json.Decoder
	_ *http.Request
	_ time.Duration
	_ *errors.TracedError
	_ *httpx.ResponseRecorder
	_ sub.Option
	_ directoryapi.Client
)

// Mock is a mockable version of the directory.example microservice, allowing functions, event sinks and web handlers to be mocked.
type Mock struct {
	*connector.Connector
	mockCreate func(ctx context.Context, httpRequestBody *directoryapi.Person) (key directoryapi.PersonKey, err error)
	mockLoad func(ctx context.Context, key directoryapi.PersonKey) (httpResponseBody *directoryapi.Person, err error)
	mockDelete func(ctx context.Context, key directoryapi.PersonKey) (err error)
	mockUpdate func(ctx context.Context, key directoryapi.PersonKey, httpRequestBody *directoryapi.Person) (err error)
	mockLoadByEmail func(ctx context.Context, email string) (httpResponseBody *directoryapi.Person, err error)
	mockList func(ctx context.Context) (httpResponseBody []directoryapi.PersonKey, err error)
	mockWebUI func(w http.ResponseWriter, r *http.Request) (err error)
}

// NewMock creates a new mockable version of the microservice.
func NewMock() *Mock {
	svc := &Mock{
		Connector: connector.New("directory.example"),
	}
	svc.SetVersion(7357) // Stands for TEST
	svc.SetDescription(`The directory microservice exposes a RESTful API for persisting personal records in a SQL database.`)
	svc.SetOnStartup(svc.doOnStartup)

	// Functions
	svc.Subscribe(`POST`, `:443/persons`, svc.doCreate)
	svc.Subscribe(`GET`, `:443/persons/key/{key}`, svc.doLoad)
	svc.Subscribe(`DELETE`, `:443/persons/key/{key}`, svc.doDelete)
	svc.Subscribe(`PUT`, `:443/persons/key/{key}`, svc.doUpdate)
	svc.Subscribe(`GET`, `:443/persons/email/{email}`, svc.doLoadByEmail)
	svc.Subscribe(`GET`, `:443/persons`, svc.doList)

	// Webs
	svc.Subscribe(`ANY`, `:443/web-ui`, svc.doWebUI)

	return svc
}

// doOnStartup makes sure that the mock is not executed in a non-dev environment.
func (svc *Mock) doOnStartup(ctx context.Context) (err error) {
	if svc.Deployment() != connector.LOCAL && svc.Deployment() != connector.TESTING {
		return errors.Newf("mocking disallowed in '%s' deployment", svc.Deployment())
	}
	return nil
}

// doCreate handles marshaling for the Create function.
func (svc *Mock) doCreate(w http.ResponseWriter, r *http.Request) error {
	if svc.mockCreate == nil {
		return errors.New("mocked endpoint 'Create' not implemented")
	}
	var i directoryapi.CreateIn
	var o directoryapi.CreateOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	o.Key, err = svc.mockCreate(
		r.Context(),
		i.HTTPRequestBody,
	)
	if err != nil {
		return errors.Trace(err)
	}
	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// MockCreate sets up a mock handler for the Create function.
func (svc *Mock) MockCreate(handler func(ctx context.Context, httpRequestBody *directoryapi.Person) (key directoryapi.PersonKey, err error)) *Mock {
	svc.mockCreate = handler
	return svc
}

// doLoad handles marshaling for the Load function.
func (svc *Mock) doLoad(w http.ResponseWriter, r *http.Request) error {
	if svc.mockLoad == nil {
		return errors.New("mocked endpoint 'Load' not implemented")
	}
	var i directoryapi.LoadIn
	var o directoryapi.LoadOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	o.HTTPResponseBody, err = svc.mockLoad(
		r.Context(),
		i.Key,
	)
	if err != nil {
		return errors.Trace(err)
	}
	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// MockLoad sets up a mock handler for the Load function.
func (svc *Mock) MockLoad(handler func(ctx context.Context, key directoryapi.PersonKey) (httpResponseBody *directoryapi.Person, err error)) *Mock {
	svc.mockLoad = handler
	return svc
}

// doDelete handles marshaling for the Delete function.
func (svc *Mock) doDelete(w http.ResponseWriter, r *http.Request) error {
	if svc.mockDelete == nil {
		return errors.New("mocked endpoint 'Delete' not implemented")
	}
	var i directoryapi.DeleteIn
	var o directoryapi.DeleteOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	err = svc.mockDelete(
		r.Context(),
		i.Key,
	)
	if err != nil {
		return errors.Trace(err)
	}
	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// MockDelete sets up a mock handler for the Delete function.
func (svc *Mock) MockDelete(handler func(ctx context.Context, key directoryapi.PersonKey) (err error)) *Mock {
	svc.mockDelete = handler
	return svc
}

// doUpdate handles marshaling for the Update function.
func (svc *Mock) doUpdate(w http.ResponseWriter, r *http.Request) error {
	if svc.mockUpdate == nil {
		return errors.New("mocked endpoint 'Update' not implemented")
	}
	var i directoryapi.UpdateIn
	var o directoryapi.UpdateOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	err = svc.mockUpdate(
		r.Context(),
		i.Key,
		i.HTTPRequestBody,
	)
	if err != nil {
		return errors.Trace(err)
	}
	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// MockUpdate sets up a mock handler for the Update function.
func (svc *Mock) MockUpdate(handler func(ctx context.Context, key directoryapi.PersonKey, httpRequestBody *directoryapi.Person) (err error)) *Mock {
	svc.mockUpdate = handler
	return svc
}

// doLoadByEmail handles marshaling for the LoadByEmail function.
func (svc *Mock) doLoadByEmail(w http.ResponseWriter, r *http.Request) error {
	if svc.mockLoadByEmail == nil {
		return errors.New("mocked endpoint 'LoadByEmail' not implemented")
	}
	var i directoryapi.LoadByEmailIn
	var o directoryapi.LoadByEmailOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	o.HTTPResponseBody, err = svc.mockLoadByEmail(
		r.Context(),
		i.Email,
	)
	if err != nil {
		return errors.Trace(err)
	}
	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// MockLoadByEmail sets up a mock handler for the LoadByEmail function.
func (svc *Mock) MockLoadByEmail(handler func(ctx context.Context, email string) (httpResponseBody *directoryapi.Person, err error)) *Mock {
	svc.mockLoadByEmail = handler
	return svc
}

// doList handles marshaling for the List function.
func (svc *Mock) doList(w http.ResponseWriter, r *http.Request) error {
	if svc.mockList == nil {
		return errors.New("mocked endpoint 'List' not implemented")
	}
	var i directoryapi.ListIn
	var o directoryapi.ListOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	o.HTTPResponseBody, err = svc.mockList(
		r.Context(),
	)
	if err != nil {
		return errors.Trace(err)
	}
	w.Header().Set("Content-Type", "application/json")
	err = json.NewEncoder(w).Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// MockList sets up a mock handler for the List function.
func (svc *Mock) MockList(handler func(ctx context.Context) (httpResponseBody []directoryapi.PersonKey, err error)) *Mock {
	svc.mockList = handler
	return svc
}

// doWebUI handles the WebUI web handler.
func (svc *Mock) doWebUI(w http.ResponseWriter, r *http.Request) (err error) {
	if svc.mockWebUI == nil {
		return errors.New("mocked endpoint 'WebUI' not implemented")
	}
	err = svc.mockWebUI(w, r)
	return errors.Trace(err)
}

// MockWebUI sets up a mock handler for the WebUI web handler.
func (svc *Mock) MockWebUI(handler func(w http.ResponseWriter, r *http.Request) (err error)) *Mock {
	svc.mockWebUI = handler
	return svc
}
