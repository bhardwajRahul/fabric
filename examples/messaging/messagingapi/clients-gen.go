/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

This file and the project encapsulating it are the confidential intellectual property of Microbus LLC.
Neither may be used, copied or distributed without the express written consent of Microbus LLC.
*/

// Code generated by Microbus. DO NOT EDIT.

/*
Package messagingapi implements the public API of the messaging.example microservice,
including clients and data structures.

The Messaging microservice demonstrates service-to-service communication patterns.
*/
package messagingapi

import (
	"context"
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/pub"
	"github.com/microbus-io/fabric/service"
	"github.com/microbus-io/fabric/sub"
)

var (
	_ context.Context
	_ *json.Decoder
	_ *http.Request
	_ strings.Reader
	_ time.Duration
	_ *errors.TracedError
	_ *httpx.BodyReader
	_ pub.Option
	_ sub.Option
)

// HostName is the default host name of the microservice: messaging.example.
const HostName = "messaging.example"

// Fully-qualified URLs of the microservice's endpoints.
var (
	URLOfHome = httpx.JoinHostAndPath(HostName, ":443/home")
	URLOfNoQueue = httpx.JoinHostAndPath(HostName, ":443/no-queue")
	URLOfDefaultQueue = httpx.JoinHostAndPath(HostName, ":443/default-queue")
	URLOfCacheLoad = httpx.JoinHostAndPath(HostName, ":443/cache-load")
	URLOfCacheStore = httpx.JoinHostAndPath(HostName, ":443/cache-store")
)

// Client is an interface to calling the endpoints of the messaging.example microservice.
// This simple version is for unicast calls.
type Client struct {
	svc  service.Publisher
	host string
}

// NewClient creates a new unicast client to the messaging.example microservice.
func NewClient(caller service.Publisher) *Client {
	return &Client{
		svc:  caller,
		host: "messaging.example",
	}
}

// ForHost replaces the default host name of this client.
func (_c *Client) ForHost(host string) *Client {
	_c.host = host
	return _c
}

// MulticastClient is an interface to calling the endpoints of the messaging.example microservice.
// This advanced version is for multicast calls.
type MulticastClient struct {
	svc  service.Publisher
	host string
}

// NewMulticastClient creates a new multicast client to the messaging.example microservice.
func NewMulticastClient(caller service.Publisher) *MulticastClient {
	return &MulticastClient{
		svc:  caller,
		host: "messaging.example",
	}
}

// ForHost replaces the default host name of this client.
func (_c *MulticastClient) ForHost(host string) *MulticastClient {
	_c.host = host
	return _c
}

/*
Home demonstrates making requests using multicast and unicast request/response patterns.
*/
func (_c *Client) Home(ctx context.Context, options ...pub.Option) (res *http.Response, err error) {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/home`)),
	}
	opts = append(opts, options...)
	res, err = _c.svc.Request(ctx, opts...)
	if err != nil {
		return nil, err // No trace
	}
	return res, err
}

/*
Home demonstrates making requests using multicast and unicast request/response patterns.
*/
func (_c *MulticastClient) Home(ctx context.Context, options ...pub.Option) <-chan *pub.Response {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/home`)),
	}
	opts = append(opts, options...)
	return _c.svc.Publish(ctx, opts...)
}

/*
NoQueue demonstrates how the NoQueue subscription option is used to create
a multicast request/response communication pattern.
All instances of this microservice will respond to each request.
*/
func (_c *Client) NoQueue(ctx context.Context, options ...pub.Option) (res *http.Response, err error) {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/no-queue`)),
	}
	opts = append(opts, options...)
	res, err = _c.svc.Request(ctx, opts...)
	if err != nil {
		return nil, err // No trace
	}
	return res, err
}

/*
NoQueue demonstrates how the NoQueue subscription option is used to create
a multicast request/response communication pattern.
All instances of this microservice will respond to each request.
*/
func (_c *MulticastClient) NoQueue(ctx context.Context, options ...pub.Option) <-chan *pub.Response {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/no-queue`)),
	}
	opts = append(opts, options...)
	return _c.svc.Publish(ctx, opts...)
}

/*
DefaultQueue demonstrates how the DefaultQueue subscription option is used to create
a unicast request/response communication pattern.
Only one of the instances of this microservice will respond to each request.
*/
func (_c *Client) DefaultQueue(ctx context.Context, options ...pub.Option) (res *http.Response, err error) {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/default-queue`)),
	}
	opts = append(opts, options...)
	res, err = _c.svc.Request(ctx, opts...)
	if err != nil {
		return nil, err // No trace
	}
	return res, err
}

/*
DefaultQueue demonstrates how the DefaultQueue subscription option is used to create
a unicast request/response communication pattern.
Only one of the instances of this microservice will respond to each request.
*/
func (_c *MulticastClient) DefaultQueue(ctx context.Context, options ...pub.Option) <-chan *pub.Response {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/default-queue`)),
	}
	opts = append(opts, options...)
	return _c.svc.Publish(ctx, opts...)
}

/*
CacheLoad looks up an element in the distributed cache of the microservice.
*/
func (_c *Client) CacheLoad(ctx context.Context, options ...pub.Option) (res *http.Response, err error) {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/cache-load`)),
	}
	opts = append(opts, options...)
	res, err = _c.svc.Request(ctx, opts...)
	if err != nil {
		return nil, err // No trace
	}
	return res, err
}

/*
CacheLoad looks up an element in the distributed cache of the microservice.
*/
func (_c *MulticastClient) CacheLoad(ctx context.Context, options ...pub.Option) <-chan *pub.Response {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/cache-load`)),
	}
	opts = append(opts, options...)
	return _c.svc.Publish(ctx, opts...)
}

/*
CacheStore stores an element in the distributed cache of the microservice.
*/
func (_c *Client) CacheStore(ctx context.Context, options ...pub.Option) (res *http.Response, err error) {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/cache-store`)),
	}
	opts = append(opts, options...)
	res, err = _c.svc.Request(ctx, opts...)
	if err != nil {
		return nil, err // No trace
	}
	return res, err
}

/*
CacheStore stores an element in the distributed cache of the microservice.
*/
func (_c *MulticastClient) CacheStore(ctx context.Context, options ...pub.Option) <-chan *pub.Response {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/cache-store`)),
	}
	opts = append(opts, options...)
	return _c.svc.Publish(ctx, opts...)
}
