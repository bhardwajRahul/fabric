/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

This file and the project encapsulating it are the confidential intellectual property of Microbus LLC.
Neither may be used, copied or distributed without the express written consent of Microbus LLC.
*/

// Code generated by Microbus. DO NOT EDIT.

/*
Package helloapi implements the public API of the hello.example microservice,
including clients and data structures.

The Hello microservice demonstrates the various capabilities of a microservice.
*/
package helloapi

import (
	"context"
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/pub"
	"github.com/microbus-io/fabric/sub"
)

var (
	_ context.Context
	_ *json.Decoder
	_ *http.Request
	_ strings.Reader
	_ time.Duration
	_ *errors.TracedError
	_ *httpx.BodyReader
	_ pub.Option
	_ sub.Option
)

// HostName is the default host name of the microservice: hello.example.
const HostName = "hello.example"

// Fully-qualified URLs of the microservice's endpoints.
var (
	URLOfHello = httpx.JoinHostAndPath(HostName, ":443/hello")
	URLOfEcho = httpx.JoinHostAndPath(HostName, ":443/echo")
	URLOfPing = httpx.JoinHostAndPath(HostName, ":443/ping")
	URLOfCalculator = httpx.JoinHostAndPath(HostName, ":443/calculator")
	URLOfBusJPEG = httpx.JoinHostAndPath(HostName, ":443/bus.jpeg")
	URLOfLocalization = httpx.JoinHostAndPath(HostName, ":443/localization")
)

// Service is an interface abstraction of a microservice used by the client.
// The connector implements this interface.
type Service interface {
	Request(ctx context.Context, options ...pub.Option) (*http.Response, error)
	Publish(ctx context.Context, options ...pub.Option) <-chan *pub.Response
	Subscribe(method string, path string, handler sub.HTTPHandler, options ...sub.Option) error
	Unsubscribe(method string, path string) error
}

// Client is an interface to calling the endpoints of the hello.example microservice.
// This simple version is for unicast calls.
type Client struct {
	svc  Service
	host string
}

// NewClient creates a new unicast client to the hello.example microservice.
func NewClient(caller Service) *Client {
	return &Client{
		svc:  caller,
		host: "hello.example",
	}
}

// ForHost replaces the default host name of this client.
func (_c *Client) ForHost(host string) *Client {
	_c.host = host
	return _c
}

// MulticastClient is an interface to calling the endpoints of the hello.example microservice.
// This advanced version is for multicast calls.
type MulticastClient struct {
	svc  Service
	host string
}

// NewMulticastClient creates a new multicast client to the hello.example microservice.
func NewMulticastClient(caller Service) *MulticastClient {
	return &MulticastClient{
		svc:  caller,
		host: "hello.example",
	}
}

// ForHost replaces the default host name of this client.
func (_c *MulticastClient) ForHost(host string) *MulticastClient {
	_c.host = host
	return _c
}

/*
Hello prints a greeting.
*/
func (_c *Client) Hello(ctx context.Context, options ...pub.Option) (res *http.Response, err error) {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/hello`)),
	}
	opts = append(opts, options...)
	res, err = _c.svc.Request(ctx, opts...)
	if err != nil {
		return nil, err // No trace
	}
	return res, err
}

/*
Hello prints a greeting.
*/
func (_c *MulticastClient) Hello(ctx context.Context, options ...pub.Option) <-chan *pub.Response {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/hello`)),
	}
	opts = append(opts, options...)
	return _c.svc.Publish(ctx, opts...)
}

/*
Echo back the incoming request in wire format.
*/
func (_c *Client) Echo(ctx context.Context, options ...pub.Option) (res *http.Response, err error) {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/echo`)),
	}
	opts = append(opts, options...)
	res, err = _c.svc.Request(ctx, opts...)
	if err != nil {
		return nil, err // No trace
	}
	return res, err
}

/*
Echo back the incoming request in wire format.
*/
func (_c *MulticastClient) Echo(ctx context.Context, options ...pub.Option) <-chan *pub.Response {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/echo`)),
	}
	opts = append(opts, options...)
	return _c.svc.Publish(ctx, opts...)
}

/*
Ping all microservices and list them.
*/
func (_c *Client) Ping(ctx context.Context, options ...pub.Option) (res *http.Response, err error) {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/ping`)),
	}
	opts = append(opts, options...)
	res, err = _c.svc.Request(ctx, opts...)
	if err != nil {
		return nil, err // No trace
	}
	return res, err
}

/*
Ping all microservices and list them.
*/
func (_c *MulticastClient) Ping(ctx context.Context, options ...pub.Option) <-chan *pub.Response {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/ping`)),
	}
	opts = append(opts, options...)
	return _c.svc.Publish(ctx, opts...)
}

/*
Calculator renders a UI for a calculator.
The calculation operation is delegated to another microservice in order to demonstrate
a call from one microservice to another.
*/
func (_c *Client) Calculator(ctx context.Context, options ...pub.Option) (res *http.Response, err error) {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/calculator`)),
	}
	opts = append(opts, options...)
	res, err = _c.svc.Request(ctx, opts...)
	if err != nil {
		return nil, err // No trace
	}
	return res, err
}

/*
Calculator renders a UI for a calculator.
The calculation operation is delegated to another microservice in order to demonstrate
a call from one microservice to another.
*/
func (_c *MulticastClient) Calculator(ctx context.Context, options ...pub.Option) <-chan *pub.Response {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/calculator`)),
	}
	opts = append(opts, options...)
	return _c.svc.Publish(ctx, opts...)
}

/*
BusJPEG serves an image from the embedded resources.
*/
func (_c *Client) BusJPEG(ctx context.Context, options ...pub.Option) (res *http.Response, err error) {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/bus.jpeg`)),
	}
	opts = append(opts, options...)
	res, err = _c.svc.Request(ctx, opts...)
	if err != nil {
		return nil, err // No trace
	}
	return res, err
}

/*
BusJPEG serves an image from the embedded resources.
*/
func (_c *MulticastClient) BusJPEG(ctx context.Context, options ...pub.Option) <-chan *pub.Response {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/bus.jpeg`)),
	}
	opts = append(opts, options...)
	return _c.svc.Publish(ctx, opts...)
}

/*
Localization prints hello in the language best matching the request's Accept-Language header.
*/
func (_c *Client) Localization(ctx context.Context, options ...pub.Option) (res *http.Response, err error) {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/localization`)),
	}
	opts = append(opts, options...)
	res, err = _c.svc.Request(ctx, opts...)
	if err != nil {
		return nil, err // No trace
	}
	return res, err
}

/*
Localization prints hello in the language best matching the request's Accept-Language header.
*/
func (_c *MulticastClient) Localization(ctx context.Context, options ...pub.Option) <-chan *pub.Response {
	method := `*`
	if method == "*" {
		method = "GET"
	}
	opts := []pub.Option{
		pub.Method(method),
		pub.URL(httpx.JoinHostAndPath(_c.host, `:443/localization`)),
	}
	opts = append(opts, options...)
	return _c.svc.Publish(ctx, opts...)
}
