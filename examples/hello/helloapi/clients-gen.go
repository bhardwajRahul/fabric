/*
Copyright (c) 2023-2025 Microbus LLC and various contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Microbus. DO NOT EDIT.

/*
Package helloapi implements the public API of the hello.example microservice,
including clients and data structures.

The Hello microservice demonstrates the various capabilities of a microservice.
*/
package helloapi

import (
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/pub"
	"github.com/microbus-io/fabric/service"
)

var (
	_ context.Context
	_ *json.Decoder
	_ io.Reader
	_ *http.Request
	_ *url.URL
	_ strings.Reader
	_ time.Duration
	_ *errors.TracedError
	_ *httpx.BodyReader
	_ pub.Option
)

// Hostname is the default hostname of the microservice: hello.example.
const Hostname = "hello.example"

// Fully-qualified URLs of the microservice's endpoints.
var (
	URLOfHello = httpx.JoinHostAndPath(Hostname, `:443/hello`)
	URLOfEcho = httpx.JoinHostAndPath(Hostname, `:443/echo`)
	URLOfPing = httpx.JoinHostAndPath(Hostname, `:443/ping`)
	URLOfCalculator = httpx.JoinHostAndPath(Hostname, `:443/calculator`)
	URLOfBusPNG = httpx.JoinHostAndPath(Hostname, `:443/bus.png`)
	URLOfLocalization = httpx.JoinHostAndPath(Hostname, `:443/localization`)
	URLOfRoot = httpx.JoinHostAndPath(Hostname, `//root`)
)

// Client is a lightweight proxy for making unicast calls to the hello.example microservice.
type Client struct {
	svc  service.Publisher
	host string
	opts []pub.Option
}

// NewClient creates a new unicast client proxy to the hello.example microservice.
func NewClient(caller service.Publisher) Client {
	return Client{
		svc:  caller,
		host: "hello.example",
	}
}

// ForHost returns a copy of the client with a different hostname to be applied to requests.
func (_c Client) ForHost(host string) Client {
	return Client{
		svc:  _c.svc,
		host: host,
		opts: _c.opts,
	}
}

// WithOptions returns a copy of the client with options to be applied to requests.
func (_c Client) WithOptions(opts ...pub.Option) Client {
	return Client{
		svc:  _c.svc,
		host: _c.host,
		opts: append(_c.opts, opts...),
	}
}

// MulticastClient is a lightweight proxy for making multicast calls to the hello.example microservice.
type MulticastClient struct {
	svc  service.Publisher
	host string
	opts []pub.Option
}

// NewMulticastClient creates a new multicast client proxy to the hello.example microservice.
func NewMulticastClient(caller service.Publisher) MulticastClient {
	return MulticastClient{
		svc:  caller,
		host: "hello.example",
	}
}

// ForHost returns a copy of the client with a different hostname to be applied to requests.
func (_c MulticastClient) ForHost(host string) MulticastClient {
	return MulticastClient{
		svc:  _c.svc,
		host: host,
		opts: _c.opts,
	}
}

// WithOptions returns a copy of the client with options to be applied to requests.
func (_c MulticastClient) WithOptions(opts ...pub.Option) MulticastClient {
	return MulticastClient{
		svc:  _c.svc,
		host: _c.host,
		opts: append(_c.opts, opts...),
	}
}

// errChan returns a response channel with a single error response.
func (_c MulticastClient) errChan(err error) <-chan *pub.Response {
	ch := make(chan *pub.Response, 1)
	ch <- pub.NewErrorResponse(err)
	close(ch)
	return ch
}

/*
Hello prints a greeting.

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c Client) Hello(ctx context.Context, method string, relURL string, contentType string, body any) (res *http.Response, err error) {
	if method == "" {
		method = "POST"
	}
	res, err = _c.svc.Request(
		ctx,
		pub.Method(method),
		pub.URL(URLOfHello),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
	return res, err // No trace
}

/*
Hello prints a greeting.

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c MulticastClient) Hello(ctx context.Context, method string, relURL string, contentType string, body any) <-chan *pub.Response {
	if method == "" {
		method = "POST"
	}
	return _c.svc.Publish(
		ctx,
		pub.Method(method),
		pub.URL(URLOfHello),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
}

/*
Echo back the incoming request in wire format.

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c Client) Echo(ctx context.Context, method string, relURL string, contentType string, body any) (res *http.Response, err error) {
	if method == "" {
		method = "POST"
	}
	res, err = _c.svc.Request(
		ctx,
		pub.Method(method),
		pub.URL(URLOfEcho),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
	return res, err // No trace
}

/*
Echo back the incoming request in wire format.

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c MulticastClient) Echo(ctx context.Context, method string, relURL string, contentType string, body any) <-chan *pub.Response {
	if method == "" {
		method = "POST"
	}
	return _c.svc.Publish(
		ctx,
		pub.Method(method),
		pub.URL(URLOfEcho),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
}

/*
Ping all microservices and list them.

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c Client) Ping(ctx context.Context, method string, relURL string, contentType string, body any) (res *http.Response, err error) {
	if method == "" {
		method = "POST"
	}
	res, err = _c.svc.Request(
		ctx,
		pub.Method(method),
		pub.URL(URLOfPing),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
	return res, err // No trace
}

/*
Ping all microservices and list them.

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c MulticastClient) Ping(ctx context.Context, method string, relURL string, contentType string, body any) <-chan *pub.Response {
	if method == "" {
		method = "POST"
	}
	return _c.svc.Publish(
		ctx,
		pub.Method(method),
		pub.URL(URLOfPing),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
}

/*
Calculator renders a UI for a calculator.
The calculation operation is delegated to another microservice in order to demonstrate
a call from one microservice to another.

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c Client) Calculator(ctx context.Context, method string, relURL string, contentType string, body any) (res *http.Response, err error) {
	if method == "" {
		method = "POST"
	}
	res, err = _c.svc.Request(
		ctx,
		pub.Method(method),
		pub.URL(URLOfCalculator),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
	return res, err // No trace
}

/*
Calculator renders a UI for a calculator.
The calculation operation is delegated to another microservice in order to demonstrate
a call from one microservice to another.

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c MulticastClient) Calculator(ctx context.Context, method string, relURL string, contentType string, body any) <-chan *pub.Response {
	if method == "" {
		method = "POST"
	}
	return _c.svc.Publish(
		ctx,
		pub.Method(method),
		pub.URL(URLOfCalculator),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
}

/*
BusPNG serves an image from the embedded resources.

If a URL is provided, it is resolved relative to the URL of the endpoint.
*/
func (_c Client) BusPNG(ctx context.Context, relURL string) (res *http.Response, err error) {
	res, err = _c.svc.Request(
		ctx,
		pub.Method("GET"),
		pub.URL(URLOfBusPNG),
		pub.RelativeURL(relURL),
		pub.Options(_c.opts...),
	)
	return res, err // No trace
}

/*
BusPNG serves an image from the embedded resources.

If a URL is provided, it is resolved relative to the URL of the endpoint.
*/
func (_c MulticastClient) BusPNG(ctx context.Context, relURL string) <-chan *pub.Response {
	return _c.svc.Publish(
		ctx,
		pub.Method("GET"),
		pub.URL(URLOfBusPNG),
		pub.RelativeURL(relURL),
		pub.Options(_c.opts...),
	)
}

/*
Localization prints hello in the language best matching the request's Accept-Language header.

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c Client) Localization(ctx context.Context, method string, relURL string, contentType string, body any) (res *http.Response, err error) {
	if method == "" {
		method = "POST"
	}
	res, err = _c.svc.Request(
		ctx,
		pub.Method(method),
		pub.URL(URLOfLocalization),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
	return res, err // No trace
}

/*
Localization prints hello in the language best matching the request's Accept-Language header.

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c MulticastClient) Localization(ctx context.Context, method string, relURL string, contentType string, body any) <-chan *pub.Response {
	if method == "" {
		method = "POST"
	}
	return _c.svc.Publish(
		ctx,
		pub.Method(method),
		pub.URL(URLOfLocalization),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
}

/*
Root is the top-most root page.

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c Client) Root(ctx context.Context, method string, relURL string, contentType string, body any) (res *http.Response, err error) {
	if method == "" {
		method = "POST"
	}
	res, err = _c.svc.Request(
		ctx,
		pub.Method(method),
		pub.URL(URLOfRoot),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
	return res, err // No trace
}

/*
Root is the top-most root page.

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c MulticastClient) Root(ctx context.Context, method string, relURL string, contentType string, body any) <-chan *pub.Response {
	if method == "" {
		method = "POST"
	}
	return _c.svc.Publish(
		ctx,
		pub.Method(method),
		pub.URL(URLOfRoot),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
}
