/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

This file and the project encapsulating it are the confidential intellectual property of Microbus LLC.
Neither may be used, copied or distributed without the express written consent of Microbus LLC.
*/

// Code generated by Microbus. DO NOT EDIT.

/*
Package intermediate serves as the foundation of the inbox.sys microservice.

Inbox listens for incoming emails and fires appropriate events.
*/
package intermediate

import (
	"context"
	"embed"
	"encoding/json"
	"fmt"
	"net/http"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/microbus-io/fabric/cfg"
	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/frame"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/log"
	"github.com/microbus-io/fabric/openapi"
	"github.com/microbus-io/fabric/shardedsql"
	"github.com/microbus-io/fabric/sub"

	"gopkg.in/yaml.v3"

	"github.com/microbus-io/fabric/services/inbox/resources"
	"github.com/microbus-io/fabric/services/inbox/inboxapi"
)

var (
	_ context.Context
	_ *embed.FS
	_ *json.Decoder
	_ fmt.Stringer
	_ *http.Request
	_ filepath.WalkFunc
	_ strconv.NumError
	_ strings.Reader
	_ time.Duration
	_ cfg.Option
	_ *errors.TracedError
	_ frame.Frame
	_ *httpx.ResponseRecorder
	_ *log.Field
	_ *openapi.Service
	_ *shardedsql.DB
	_ sub.Option
	_ yaml.Encoder
	_ inboxapi.Client
)

// ToDo defines the interface that the microservice must implement.
// The intermediate delegates handling to this interface.
type ToDo interface {
	OnStartup(ctx context.Context) (err error)
	OnShutdown(ctx context.Context) (err error)
	OnChangedPort(ctx context.Context) (err error)
	OnChangedEnabled(ctx context.Context) (err error)
	OnChangedMaxSize(ctx context.Context) (err error)
	OnChangedMaxClients(ctx context.Context) (err error)
	OnChangedWorkers(ctx context.Context) (err error)
}

// Intermediate extends and customizes the generic base connector.
// Code generated microservices then extend the intermediate.
type Intermediate struct {
	*connector.Connector
	impl ToDo
}

// NewService creates a new intermediate service.
func NewService(impl ToDo, version int) *Intermediate {
	svc := &Intermediate{
		Connector: connector.New("inbox.sys"),
		impl: impl,
	}
	svc.SetVersion(version)
	svc.SetDescription(`Inbox listens for incoming emails and fires appropriate events.`)

	// Lifecycle
	svc.SetOnStartup(svc.impl.OnStartup)
	svc.SetOnShutdown(svc.impl.OnShutdown)

	// Configs
	svc.SetOnConfigChanged(svc.doOnConfigChanged)
	svc.DefineConfig(
		"Port",
		cfg.Description(`Port is the TCP port to listen to.`),
		cfg.Validation(`int [1,65535]`),
		cfg.DefaultValue(`25`),
	)
	svc.DefineConfig(
		"Enabled",
		cfg.Description(`Enabled determines whether the email server is started.`),
		cfg.Validation(`bool`),
		cfg.DefaultValue(`true`),
	)
	svc.DefineConfig(
		"MaxSize",
		cfg.Description(`MaxSize is the maximum size of messages that will be accepted, in megabytes.
Defaults to 10 megabytes.`),
		cfg.Validation(`int [0,1024]`),
		cfg.DefaultValue(`10`),
	)
	svc.DefineConfig(
		"MaxClients",
		cfg.Description(`MaxClients controls how many client connection can be opened in parallel.
Defaults to 128.`),
		cfg.Validation(`int [1,1024]`),
		cfg.DefaultValue(`128`),
	)
	svc.DefineConfig(
		"Workers",
		cfg.Description(`Workers controls how many workers process incoming mail.
Defaults to 8.`),
		cfg.Validation(`int [1,1024]`),
		cfg.DefaultValue(`8`),
	)
	
	// OpenAPI
	svc.Subscribe("GET", `:*/openapi.json`, svc.doOpenAPI)

	// Resources file system
	svc.SetResFS(resources.FS)

	return svc
}

// doOpenAPI renders the OpenAPI document of the microservice.
func (svc *Intermediate) doOpenAPI(w http.ResponseWriter, r *http.Request) error {
	oapiSvc := openapi.Service{
		ServiceName: svc.HostName(),
		Description: svc.Description(),
		Version:     svc.Version(),
		Endpoints:   []*openapi.Endpoint{},
		RemoteURI:   frame.Of(r).XForwardedFullURL(),
	}

	if len(oapiSvc.Endpoints) == 0 {
		w.WriteHeader(http.StatusNotFound)
		return nil
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	b, err := json.MarshalIndent(&oapiSvc, "", "    ")
	if err != nil {
		return errors.Trace(err)
	}
	_, err = w.Write(b)
	return errors.Trace(err)
}

// doOnConfigChanged is called when the config of the microservice changes.
func (svc *Intermediate) doOnConfigChanged(ctx context.Context, changed func(string) bool) (err error) {
	if changed("Port") {
		err := svc.impl.OnChangedPort(ctx)
		if err != nil {
			return err // No trace
		}
	}
	if changed("Enabled") {
		err := svc.impl.OnChangedEnabled(ctx)
		if err != nil {
			return err // No trace
		}
	}
	if changed("MaxSize") {
		err := svc.impl.OnChangedMaxSize(ctx)
		if err != nil {
			return err // No trace
		}
	}
	if changed("MaxClients") {
		err := svc.impl.OnChangedMaxClients(ctx)
		if err != nil {
			return err // No trace
		}
	}
	if changed("Workers") {
		err := svc.impl.OnChangedWorkers(ctx)
		if err != nil {
			return err // No trace
		}
	}
	return nil
}

/*
Port is the TCP port to listen to.
*/
func (svc *Intermediate) Port() (port int) {
	_val := svc.Config("Port")
	_i, _ := strconv.ParseInt(_val, 10, 64)
	return int(_i)
}

/*
Port is the TCP port to listen to.
*/
func Port(port int) (func(connector.Service) error) {
	return func(svc connector.Service) error {
		return svc.SetConfig("Port", fmt.Sprintf("%v", port))
	}
}

/*
Enabled determines whether the email server is started.
*/
func (svc *Intermediate) Enabled() (enabled bool) {
	_val := svc.Config("Enabled")
	_b, _ := strconv.ParseBool(_val)
	return _b
}

/*
Enabled determines whether the email server is started.
*/
func Enabled(enabled bool) (func(connector.Service) error) {
	return func(svc connector.Service) error {
		return svc.SetConfig("Enabled", fmt.Sprintf("%v", enabled))
	}
}

/*
MaxSize is the maximum size of messages that will be accepted, in megabytes.
Defaults to 10 megabytes.
*/
func (svc *Intermediate) MaxSize() (mb int) {
	_val := svc.Config("MaxSize")
	_i, _ := strconv.ParseInt(_val, 10, 64)
	return int(_i)
}

/*
MaxSize is the maximum size of messages that will be accepted, in megabytes.
Defaults to 10 megabytes.
*/
func MaxSize(mb int) (func(connector.Service) error) {
	return func(svc connector.Service) error {
		return svc.SetConfig("MaxSize", fmt.Sprintf("%v", mb))
	}
}

/*
MaxClients controls how many client connection can be opened in parallel.
Defaults to 128.
*/
func (svc *Intermediate) MaxClients() (clients int) {
	_val := svc.Config("MaxClients")
	_i, _ := strconv.ParseInt(_val, 10, 64)
	return int(_i)
}

/*
MaxClients controls how many client connection can be opened in parallel.
Defaults to 128.
*/
func MaxClients(clients int) (func(connector.Service) error) {
	return func(svc connector.Service) error {
		return svc.SetConfig("MaxClients", fmt.Sprintf("%v", clients))
	}
}

/*
Workers controls how many workers process incoming mail.
Defaults to 8.
*/
func (svc *Intermediate) Workers() (clients int) {
	_val := svc.Config("Workers")
	_i, _ := strconv.ParseInt(_val, 10, 64)
	return int(_i)
}

/*
Workers controls how many workers process incoming mail.
Defaults to 8.
*/
func Workers(clients int) (func(connector.Service) error) {
	return func(svc connector.Service) error {
		return svc.SetConfig("Workers", fmt.Sprintf("%v", clients))
	}
}
