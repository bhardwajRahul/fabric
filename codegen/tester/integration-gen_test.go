/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

This file and the project encapsulating it are the confidential intellectual property of Microbus LLC.
Neither may be used, copied or distributed without the express written consent of Microbus LLC.
*/

// Code generated by Microbus. DO NOT EDIT.

package tester

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"testing"
	"time"

	"github.com/andybalholm/cascadia"
	"github.com/microbus-io/fabric/application"
	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/frame"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/pub"
	"github.com/microbus-io/fabric/rand"
	"github.com/microbus-io/fabric/utils"
	"github.com/stretchr/testify/assert"
	"golang.org/x/net/html"

	"github.com/microbus-io/fabric/codegen/tester/testerapi"
)

var (
	_ bytes.Buffer
	_ context.Context
	_ fmt.Stringer
	_ io.Reader
	_ *http.Request
	_ os.File
	_ time.Time
	_ strings.Builder
	_ cascadia.Sel
	_ *connector.Connector
	_ *errors.TracedError
	_ frame.Frame
	_ *httpx.BodyReader
	_ pub.Option
	_ rand.Void
	_ utils.SyncMap[string, string]
	_ assert.TestingT
	_ *html.Node
	_ *testerapi.Client
)

var (
	// App manages the lifecycle of the microservices used in the test
	App *application.Application
	// Svc is the codegen.test microservice being tested
	Svc *Service
)

func TestMain(m *testing.M) {
	var code int

	// Initialize the application
	err := func() error {
		var err error
		App = application.NewTesting()
		Svc = NewService()
		err = Initialize()
		if err != nil {
			return err
		}
		err = App.Startup()
		if err != nil {
			return err
		}
		return nil
	}()
	if err != nil {
		fmt.Fprintf(os.Stderr, "--- FAIL: %+v\n", err)
		code = 19
	}

	// Run the tests
	if err == nil {
		code = m.Run()
	}

	// Terminate the app
	err = func() error {
		var err error
		var lastErr error
		err = Terminate()
		if err != nil {
			lastErr = err
		}
		err = App.Shutdown()
		if err != nil {
			lastErr = err
		}
		return lastErr
	}()
	if err != nil {
		fmt.Fprintf(os.Stderr, "--- FAIL: %+v\n", err)
	}

	os.Exit(code)
}

// Context creates a new context for a test.
func Context() context.Context {
	return frame.ContextWithFrame(context.Background())
}

// StringCutTestCase assists in asserting against the results of executing StringCut.
type StringCutTestCase struct {
	_t *testing.T
	_dur time.Duration
	before string
	after string
	found bool
	err error
}

// Expect asserts no error and exact return values.
func (_tc *StringCutTestCase) Expect(before string, after string, found bool) *StringCutTestCase {
	if assert.NoError(_tc._t, _tc.err) {
		assert.Equal(_tc._t, before, _tc.before)
		assert.Equal(_tc._t, after, _tc.after)
		assert.Equal(_tc._t, found, _tc.found)
	}
	return _tc
}

// Error asserts an error.
func (tc *StringCutTestCase) Error(errContains string) *StringCutTestCase {
	if assert.Error(tc._t, tc.err) {
		assert.Contains(tc._t, tc.err.Error(), errContains)
	}
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *StringCutTestCase) ErrorCode(statusCode int) *StringCutTestCase {
	if assert.Error(tc._t, tc.err) {
		assert.Equal(tc._t, statusCode, errors.StatusCode(tc.err))
	}
	return tc
}

// NoError asserts no error.
func (tc *StringCutTestCase) NoError() *StringCutTestCase {
	assert.NoError(tc._t, tc.err)
	return tc
}

// CompletedIn checks that the duration of the operation is less than or equal the threshold.
func (tc *StringCutTestCase) CompletedIn(threshold time.Duration) *StringCutTestCase {
	assert.LessOrEqual(tc._t, tc._dur, threshold)
	return tc
}

// Assert asserts using a provided function.
func (tc *StringCutTestCase) Assert(asserter func(t *testing.T, before string, after string, found bool, err error)) *StringCutTestCase {
	asserter(tc._t, tc.before, tc.after, tc.found, tc.err)
	return tc
}

// Get returns the result of executing StringCut.
func (tc *StringCutTestCase) Get() (before string, after string, found bool, err error) {
	return tc.before, tc.after, tc.found, tc.err
}

// StringCut executes the function and returns a corresponding test case.
func StringCut(t *testing.T, ctx context.Context, s string, sep string) *StringCutTestCase {
	tc := &StringCutTestCase{_t: t}
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		tc.before, tc.after, tc.found, tc.err = Svc.StringCut(ctx, s, sep)
		return tc.err
	})
	tc._dur = time.Since(t0)
	return tc
}

// PointDistanceTestCase assists in asserting against the results of executing PointDistance.
type PointDistanceTestCase struct {
	_t *testing.T
	_dur time.Duration
	d float64
	err error
}

// Expect asserts no error and exact return values.
func (_tc *PointDistanceTestCase) Expect(d float64) *PointDistanceTestCase {
	if assert.NoError(_tc._t, _tc.err) {
		assert.Equal(_tc._t, d, _tc.d)
	}
	return _tc
}

// Error asserts an error.
func (tc *PointDistanceTestCase) Error(errContains string) *PointDistanceTestCase {
	if assert.Error(tc._t, tc.err) {
		assert.Contains(tc._t, tc.err.Error(), errContains)
	}
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *PointDistanceTestCase) ErrorCode(statusCode int) *PointDistanceTestCase {
	if assert.Error(tc._t, tc.err) {
		assert.Equal(tc._t, statusCode, errors.StatusCode(tc.err))
	}
	return tc
}

// NoError asserts no error.
func (tc *PointDistanceTestCase) NoError() *PointDistanceTestCase {
	assert.NoError(tc._t, tc.err)
	return tc
}

// CompletedIn checks that the duration of the operation is less than or equal the threshold.
func (tc *PointDistanceTestCase) CompletedIn(threshold time.Duration) *PointDistanceTestCase {
	assert.LessOrEqual(tc._t, tc._dur, threshold)
	return tc
}

// Assert asserts using a provided function.
func (tc *PointDistanceTestCase) Assert(asserter func(t *testing.T, d float64, err error)) *PointDistanceTestCase {
	asserter(tc._t, tc.d, tc.err)
	return tc
}

// Get returns the result of executing PointDistance.
func (tc *PointDistanceTestCase) Get() (d float64, err error) {
	return tc.d, tc.err
}

// PointDistance executes the function and returns a corresponding test case.
func PointDistance(t *testing.T, ctx context.Context, p1 testerapi.XYCoord, p2 testerapi.XYCoord) *PointDistanceTestCase {
	tc := &PointDistanceTestCase{_t: t}
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		tc.d, tc.err = Svc.PointDistance(ctx, p1, p2)
		return tc.err
	})
	tc._dur = time.Since(t0)
	return tc
}

// SubArrayRangeTestCase assists in asserting against the results of executing SubArrayRange.
type SubArrayRangeTestCase struct {
	_t *testing.T
	_dur time.Duration
	httpResponseBody []int
	sum int
	httpStatusCode int
	err error
}

// Expect asserts no error and exact return values.
func (_tc *SubArrayRangeTestCase) Expect(httpResponseBody []int, sum int, httpStatusCode int) *SubArrayRangeTestCase {
	if assert.NoError(_tc._t, _tc.err) {
		assert.Equal(_tc._t, httpResponseBody, _tc.httpResponseBody)
		assert.Equal(_tc._t, sum, _tc.sum)
		assert.Equal(_tc._t, httpStatusCode, _tc.httpStatusCode)
	}
	return _tc
}

// Error asserts an error.
func (tc *SubArrayRangeTestCase) Error(errContains string) *SubArrayRangeTestCase {
	if assert.Error(tc._t, tc.err) {
		assert.Contains(tc._t, tc.err.Error(), errContains)
	}
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *SubArrayRangeTestCase) ErrorCode(statusCode int) *SubArrayRangeTestCase {
	if assert.Error(tc._t, tc.err) {
		assert.Equal(tc._t, statusCode, errors.StatusCode(tc.err))
	}
	return tc
}

// NoError asserts no error.
func (tc *SubArrayRangeTestCase) NoError() *SubArrayRangeTestCase {
	assert.NoError(tc._t, tc.err)
	return tc
}

// CompletedIn checks that the duration of the operation is less than or equal the threshold.
func (tc *SubArrayRangeTestCase) CompletedIn(threshold time.Duration) *SubArrayRangeTestCase {
	assert.LessOrEqual(tc._t, tc._dur, threshold)
	return tc
}

// Assert asserts using a provided function.
func (tc *SubArrayRangeTestCase) Assert(asserter func(t *testing.T, httpResponseBody []int, sum int, httpStatusCode int, err error)) *SubArrayRangeTestCase {
	asserter(tc._t, tc.httpResponseBody, tc.sum, tc.httpStatusCode, tc.err)
	return tc
}

// Get returns the result of executing SubArrayRange.
func (tc *SubArrayRangeTestCase) Get() (httpResponseBody []int, sum int, httpStatusCode int, err error) {
	return tc.httpResponseBody, tc.sum, tc.httpStatusCode, tc.err
}

// SubArrayRange executes the function and returns a corresponding test case.
func SubArrayRange(t *testing.T, ctx context.Context, httpRequestBody []int, min int, max int) *SubArrayRangeTestCase {
	tc := &SubArrayRangeTestCase{_t: t}
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		tc.httpResponseBody, tc.sum, tc.httpStatusCode, tc.err = Svc.SubArrayRange(ctx, httpRequestBody, min, max)
		return tc.err
	})
	tc._dur = time.Since(t0)
	return tc
}

// FunctionPathArgumentsTestCase assists in asserting against the results of executing FunctionPathArguments.
type FunctionPathArgumentsTestCase struct {
	_t *testing.T
	_dur time.Duration
	joined string
	err error
}

// Expect asserts no error and exact return values.
func (_tc *FunctionPathArgumentsTestCase) Expect(joined string) *FunctionPathArgumentsTestCase {
	if assert.NoError(_tc._t, _tc.err) {
		assert.Equal(_tc._t, joined, _tc.joined)
	}
	return _tc
}

// Error asserts an error.
func (tc *FunctionPathArgumentsTestCase) Error(errContains string) *FunctionPathArgumentsTestCase {
	if assert.Error(tc._t, tc.err) {
		assert.Contains(tc._t, tc.err.Error(), errContains)
	}
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *FunctionPathArgumentsTestCase) ErrorCode(statusCode int) *FunctionPathArgumentsTestCase {
	if assert.Error(tc._t, tc.err) {
		assert.Equal(tc._t, statusCode, errors.StatusCode(tc.err))
	}
	return tc
}

// NoError asserts no error.
func (tc *FunctionPathArgumentsTestCase) NoError() *FunctionPathArgumentsTestCase {
	assert.NoError(tc._t, tc.err)
	return tc
}

// CompletedIn checks that the duration of the operation is less than or equal the threshold.
func (tc *FunctionPathArgumentsTestCase) CompletedIn(threshold time.Duration) *FunctionPathArgumentsTestCase {
	assert.LessOrEqual(tc._t, tc._dur, threshold)
	return tc
}

// Assert asserts using a provided function.
func (tc *FunctionPathArgumentsTestCase) Assert(asserter func(t *testing.T, joined string, err error)) *FunctionPathArgumentsTestCase {
	asserter(tc._t, tc.joined, tc.err)
	return tc
}

// Get returns the result of executing FunctionPathArguments.
func (tc *FunctionPathArgumentsTestCase) Get() (joined string, err error) {
	return tc.joined, tc.err
}

// FunctionPathArguments executes the function and returns a corresponding test case.
func FunctionPathArguments(t *testing.T, ctx context.Context, named string, path2 string, suffix string) *FunctionPathArgumentsTestCase {
	tc := &FunctionPathArgumentsTestCase{_t: t}
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		tc.joined, tc.err = Svc.FunctionPathArguments(ctx, named, path2, suffix)
		return tc.err
	})
	tc._dur = time.Since(t0)
	return tc
}

// WebPathArgumentsTestCase assists in asserting against the results of executing WebPathArguments.
type WebPathArgumentsTestCase struct {
	t *testing.T
	dur time.Duration
	res *http.Response
	err error
}

// StatusOK asserts no error and a status code 200.
func (tc *WebPathArgumentsTestCase) StatusOK() *WebPathArgumentsTestCase {
	if assert.NoError(tc.t, tc.err) {
		assert.Equal(tc.t, tc.res.StatusCode, http.StatusOK)
	}
	return tc
}

// StatusCode asserts no error and a status code.
func (tc *WebPathArgumentsTestCase) StatusCode(statusCode int) *WebPathArgumentsTestCase {
	if assert.NoError(tc.t, tc.err) {
		assert.Equal(tc.t, tc.res.StatusCode, statusCode)
	}
	return tc
}

// BodyContains asserts no error and that the response body contains the string or byte array value.
func (tc *WebPathArgumentsTestCase) BodyContains(value any) *WebPathArgumentsTestCase {
	if assert.NoError(tc.t, tc.err) {
		body := tc.res.Body.(*httpx.BodyReader).Bytes()
		switch v := value.(type) {
		case []byte:
			assert.True(tc.t, bytes.Contains(body, v), "%v does not contain %v", body, v)
		case string:
			assert.Contains(tc.t, string(body), v)
		default:
			vv := fmt.Sprintf("%v", v)
			assert.Contains(tc.t, string(body), vv)
		}
	}
	return tc
}

// BodyNotContains asserts no error and that the response body does not contain the string or byte array value.
func (tc *WebPathArgumentsTestCase) BodyNotContains(value any) *WebPathArgumentsTestCase {
	if assert.NoError(tc.t, tc.err) {
		body := tc.res.Body.(*httpx.BodyReader).Bytes()
		switch v := value.(type) {
		case []byte:
			assert.False(tc.t, bytes.Contains(body, v), "%v contains %v", body, v)
		case string:
			assert.NotContains(tc.t, string(body), v)
		default:
			vv := fmt.Sprintf("%v", v)
			assert.NotContains(tc.t, string(body), vv)
		}
	}
	return tc
}

// HeaderContains asserts no error and that the named header contains the value.
func (tc *WebPathArgumentsTestCase) HeaderContains(headerName string, value string) *WebPathArgumentsTestCase {
	if assert.NoError(tc.t, tc.err) {
		assert.Contains(tc.t, tc.res.Header.Get(headerName), value)
	}
	return tc
}

// HeaderNotContains asserts no error and that the named header does not contain a string.
func (tc *WebPathArgumentsTestCase) HeaderNotContains(headerName string, value string) *WebPathArgumentsTestCase {
	if assert.NoError(tc.t, tc.err) {
		assert.NotContains(tc.t, tc.res.Header.Get(headerName), value)
	}
	return tc
}

// HeaderEqual asserts no error and that the named header matches the value.
func (tc *WebPathArgumentsTestCase) HeaderEqual(headerName string, value string) *WebPathArgumentsTestCase {
	if assert.NoError(tc.t, tc.err) {
		assert.Equal(tc.t, value, tc.res.Header.Get(headerName))
	}
	return tc
}

// HeaderNotEqual asserts no error and that the named header does not matche the value.
func (tc *WebPathArgumentsTestCase) HeaderNotEqual(headerName string, value string) *WebPathArgumentsTestCase {
	if assert.NoError(tc.t, tc.err) {
		assert.NotEqual(tc.t, value, tc.res.Header.Get(headerName))
	}
	return tc
}

// HeaderExists asserts no error and that the named header exists.
func (tc *WebPathArgumentsTestCase) HeaderExists(headerName string) *WebPathArgumentsTestCase {
	if assert.NoError(tc.t, tc.err) {
		assert.NotEmpty(tc.t, tc.res.Header.Values(headerName), "Header %s does not exist", headerName)
	}
	return tc
}

// HeaderNotExists asserts no error and that the named header does not exists.
func (tc *WebPathArgumentsTestCase) HeaderNotExists(headerName string) *WebPathArgumentsTestCase {
	if assert.NoError(tc.t, tc.err) {
		assert.Empty(tc.t, tc.res.Header.Values(headerName), "Header %s exists", headerName)
	}
	return tc
}

// ContentType asserts no error and that the Content-Type header matches the expected value.
func (tc *WebPathArgumentsTestCase) ContentType(expected string) *WebPathArgumentsTestCase {
	if assert.NoError(tc.t, tc.err) {
		assert.Equal(tc.t, expected, tc.res.Header.Get("Content-Type"))
	}
	return tc
}

/*
TagExists asserts no error and that the at least one tag matches the CSS selector query.

Examples:

	TagExists(`TR > TD > A.expandable[href]`)
	TagExists(`DIV#main_panel`)
	TagExists(`TR TD INPUT[name="x"]`)
*/
func (tc *WebPathArgumentsTestCase) TagExists(cssSelectorQuery string) *WebPathArgumentsTestCase {
	if assert.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !assert.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		body := tc.res.Body.(*httpx.BodyReader).Bytes()
		doc, err := html.Parse(bytes.NewReader(body))
		if !assert.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		assert.NotEmpty(tc.t, matches, "Found no tags matching %s", cssSelectorQuery)
	}
	return tc
}

/*
TagNotExists asserts no error and that the no tag matches the CSS selector query.

Example:

	TagNotExists(`TR > TD > A.expandable[href]`)
	TagNotExists(`DIV#main_panel`)
	TagNotExists(`TR TD INPUT[name="x"]`)
*/
func (tc *WebPathArgumentsTestCase) TagNotExists(cssSelectorQuery string) *WebPathArgumentsTestCase {
	if assert.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !assert.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		body := tc.res.Body.(*httpx.BodyReader).Bytes()
		doc, err := html.Parse(bytes.NewReader(body))
		if !assert.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		assert.Empty(tc.t, matches, "Found %d tag(s) matching %s", len(matches), cssSelectorQuery)
	}
	return tc
}

/*
TagEqual asserts no error and that the at least one of the tags matching the CSS selector query
either contains the exact text itself or has a descendant that does.

Example:

	TagEqual("TR > TD > A.expandable[href]", "Expand")
	TagEqual("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *WebPathArgumentsTestCase) TagEqual(cssSelectorQuery string, value string) *WebPathArgumentsTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if x.Data == value || textMatches(x) {
				return true
			}
		}
		return false
	}

	if assert.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !assert.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		body := tc.res.Body.(*httpx.BodyReader).Bytes()
		doc, err := html.Parse(bytes.NewReader(body))
		if !assert.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if !assert.NotEmpty(tc.t, matches, "Selector %s does not match any tags", cssSelectorQuery) {
			return tc
		}
		if value == "" {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		assert.True(tc.t, found, "No tag matching %s contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagContains asserts no error and that the at least one of the tags matching the CSS selector query
either contains the text itself or has a descendant that does.

Example:

	TagContains("TR > TD > A.expandable[href]", "Expand")
	TagContains("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *WebPathArgumentsTestCase) TagContains(cssSelectorQuery string, value string) *WebPathArgumentsTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if strings.Contains(x.Data, value) || textMatches(x) {
				return true
			}
		}
		return false
	}

	if assert.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !assert.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		body := tc.res.Body.(*httpx.BodyReader).Bytes()
		doc, err := html.Parse(bytes.NewReader(body))
		if !assert.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if !assert.NotEmpty(tc.t, matches, "Selector %s does not match any tags", cssSelectorQuery) {
			return tc
		}
		if value == "" {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		assert.True(tc.t, found, "No tag matching %s contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagNotEqual asserts no error and that there is no tag matching the CSS selector that
either contains the exact text itself or has a descendant that does.

Example:

	TagNotEqual("TR > TD > A[href]", "Harry Potter")
	TagNotEqual("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *WebPathArgumentsTestCase) TagNotEqual(cssSelectorQuery string, value string) *WebPathArgumentsTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if x.Data == value || textMatches(x) {
				return true
			}
		}
		return false
	}

	if assert.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !assert.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		body := tc.res.Body.(*httpx.BodyReader).Bytes()
		doc, err := html.Parse(bytes.NewReader(body))
		if !assert.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if len(matches) == 0 {
			return tc
		}
		if !assert.NotEmpty(tc.t, value, "Found tag matching %s", cssSelectorQuery) {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		assert.False(tc.t, found, "Found tag matching %s that contains %s", cssSelectorQuery, value)
	}
	return tc
}

/*
TagNotContains asserts no error and that there is no tag matching the CSS selector that
either contains the text itself or has a descendant that does.

Example:

	TagNotContains("TR > TD > A[href]", "Harry Potter")
	TagNotContains("DIV#main_panel > SELECT > OPTION", "Red")
*/
func (tc *WebPathArgumentsTestCase) TagNotContains(cssSelectorQuery string, value string) *WebPathArgumentsTestCase {
	var textMatches func(n *html.Node) bool
	textMatches = func(n *html.Node) bool {
		for x := n.FirstChild; x != nil; x = x.NextSibling {
			if strings.Contains(x.Data, value) || textMatches(x) {
				return true
			}
		}
		return false
	}

	if assert.NoError(tc.t, tc.err) {
		selector, err := cascadia.Compile(cssSelectorQuery)
		if !assert.NoError(tc.t, err, "Invalid selector %s", cssSelectorQuery) {
			return tc
		}
		body := tc.res.Body.(*httpx.BodyReader).Bytes()
		doc, err := html.Parse(bytes.NewReader(body))
		if !assert.NoError(tc.t, err, "Failed to parse HTML") {
			return tc
		}
		matches := selector.MatchAll(doc)
		if len(matches) == 0 {
			return tc
		}
		if !assert.NotEmpty(tc.t, value, "Found tag matching %s", cssSelectorQuery) {
			return tc
		}
		found := false
		for _, match := range matches {
			if textMatches(match) {
				found = true
				break
			}
		}
		assert.False(tc.t, found, "Found tag matching %s that contains %s", cssSelectorQuery, value)
	}
	return tc
}

// Error asserts an error.
func (tc *WebPathArgumentsTestCase) Error(errContains string) *WebPathArgumentsTestCase {
	if assert.Error(tc.t, tc.err) {
		assert.Contains(tc.t, tc.err.Error(), errContains)
	}
	return tc
}

// ErrorCode asserts an error by its status code.
func (tc *WebPathArgumentsTestCase) ErrorCode(statusCode int) *WebPathArgumentsTestCase {
	if assert.Error(tc.t, tc.err) {
		assert.Equal(tc.t, statusCode, errors.Convert(tc.err).StatusCode)
	}
	return tc
}

// NoError asserts no error.
func (tc *WebPathArgumentsTestCase) NoError() *WebPathArgumentsTestCase {
	assert.NoError(tc.t, tc.err)
	return tc
}

// CompletedIn checks that the duration of the operation is less than or equal the threshold.
func (tc *WebPathArgumentsTestCase) CompletedIn(threshold time.Duration) *WebPathArgumentsTestCase {
	assert.LessOrEqual(tc.t, tc.dur, threshold)
	return tc
}

// Assert asserts using a provided function.
func (tc *WebPathArgumentsTestCase) Assert(asserter func(t *testing.T, res *http.Response, err error)) *WebPathArgumentsTestCase {
	asserter(tc.t, tc.res, tc.err)
	return tc
}

// Get returns the result of executing WebPathArguments.
func (tc *WebPathArgumentsTestCase) Get() (res *http.Response, err error) {
	return tc.res, tc.err
}

/*
WebPathArguments_Get performs a GET request to the WebPathArguments endpoint.

WebPathArguments tests path arguments in web handlers.

If a URL is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
*/
func WebPathArguments_Get(t *testing.T, ctx context.Context, url string) *WebPathArgumentsTestCase {
	tc := &WebPathArgumentsTestCase{t: t}
	var err error
	url, err = httpx.ResolveURL(testerapi.URLOfWebPathArguments, url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.ResolvePathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r, err := http.NewRequest("GET", url, nil)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	ctx = frame.CloneContext(ctx)
	r = r.WithContext(ctx)
	r.Header = frame.Of(ctx).Header()
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.WebPathArguments(w, r)
	})
	tc.dur = time.Since(t0)
	tc.res = w.Result()
	return tc
}

/*
WebPathArguments_Post performs a POST request to the WebPathArguments endpoint.

WebPathArguments tests path arguments in web handlers.

If a URL is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func WebPathArguments_Post(t *testing.T, ctx context.Context, url string, contentType string, body any) *WebPathArgumentsTestCase {
	tc := &WebPathArgumentsTestCase{t: t}
	var err error
	url, err = httpx.ResolveURL(testerapi.URLOfWebPathArguments, url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.ResolvePathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r, err := httpx.NewRequest("POST", url, nil)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	ctx = frame.CloneContext(ctx)
	r = r.WithContext(ctx)
	r.Header = frame.Of(ctx).Header()
	err = httpx.SetRequestBody(r, body)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	if contentType != "" {
		r.Header.Set("Content-Type", contentType)
	}
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.WebPathArguments(w, r)
	})
	tc.dur = time.Since(t0)
	tc.res = w.Result()
	return tc
}

/*
WebPathArguments tests path arguments in web handlers.

If a request is not provided, it defaults to the URL of the endpoint. Otherwise, it is resolved relative to the URL of the endpoint.
*/
func WebPathArguments(t *testing.T, r *http.Request) *WebPathArgumentsTestCase {
	tc := &WebPathArgumentsTestCase{t: t}
	var err error
	if r == nil {
		r, err = http.NewRequest(`GET`, "", nil)
		if err != nil {
			tc.err = errors.Trace(err)
			return tc
		}
	}
	url, err := httpx.ResolveURL(testerapi.URLOfWebPathArguments, r.URL.String())
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	url, err = httpx.ResolvePathArguments(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	r.URL, err = httpx.ParseURL(url)
	if err != nil {
		tc.err = errors.Trace(err)
		return tc
	}
	for k, vv := range frame.Of(r.Context()).Header() {
		r.Header[k] = vv
	}
	ctx := frame.ContextWithFrameOf(r.Context(), r.Header)
	r = r.WithContext(ctx)
	w := httpx.NewResponseRecorder()
	t0 := time.Now()
	tc.err = utils.CatchPanic(func() error {
		return Svc.WebPathArguments(w, r)
	})
	tc.res = w.Result()
	tc.dur = time.Since(t0)
	return tc
}
