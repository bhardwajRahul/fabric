/*
Copyright (c) 2023-2024 Microbus LLC and various contributors

This file and the project encapsulating it are the confidential intellectual property of Microbus LLC.
Neither may be used, copied or distributed without the express written consent of Microbus LLC.
*/

// Code generated by Microbus. DO NOT EDIT.

/*
Package intermediate serves as the foundation of the codegen.test microservice.

The tester is used to test the code generator's functions.
*/
package intermediate

import (
	"context"
	"embed"
	"encoding/json"
	"fmt"
	"net/http"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/microbus-io/fabric/cfg"
	"github.com/microbus-io/fabric/connector"
	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/frame"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/log"
	"github.com/microbus-io/fabric/openapi"
	"github.com/microbus-io/fabric/service"
	"github.com/microbus-io/fabric/sub"

	"gopkg.in/yaml.v3"

	"github.com/microbus-io/fabric/codegen/tester/resources"
	"github.com/microbus-io/fabric/codegen/tester/testerapi"
)

var (
	_ context.Context
	_ *embed.FS
	_ *json.Decoder
	_ fmt.Stringer
	_ *http.Request
	_ filepath.WalkFunc
	_ strconv.NumError
	_ strings.Reader
	_ time.Duration
	_ cfg.Option
	_ *errors.TracedError
	_ frame.Frame
	_ *httpx.ResponseRecorder
	_ *log.Field
	_ *openapi.Service
	_ service.Service
	_ sub.Option
	_ yaml.Encoder
	_ testerapi.Client
)

// ToDo defines the interface that the microservice must implement.
// The intermediate delegates handling to this interface.
type ToDo interface {
	OnStartup(ctx context.Context) (err error)
	OnShutdown(ctx context.Context) (err error)
	StringCut(ctx context.Context, s string, sep string) (before string, after string, found bool, err error)
	PointDistance(ctx context.Context, p1 testerapi.XYCoord, p2 *testerapi.XYCoord) (d float64, err error)
	ShiftPoint(ctx context.Context, p *testerapi.XYCoord, x float64, y float64) (shifted *testerapi.XYCoord, err error)
	SubArrayRange(ctx context.Context, httpRequestBody []int, min int, max int) (httpResponseBody []int, httpStatusCode int, err error)
	SumTwoIntegers(ctx context.Context, x int, y int) (sum int, httpStatusCode int, err error)
	FunctionPathArguments(ctx context.Context, named string, path2 string, suffix string) (joined string, err error)
	NonStringPathArguments(ctx context.Context, named int, path2 bool, suffix float64) (joined string, err error)
	UnnamedFunctionPathArguments(ctx context.Context, path1 string, path2 string, path3 string) (joined string, err error)
	PathArgumentsPriority(ctx context.Context, foo string) (echo string, err error)
	Echo(w http.ResponseWriter, r *http.Request) (err error)
	WebPathArguments(w http.ResponseWriter, r *http.Request) (err error)
	UnnamedWebPathArguments(w http.ResponseWriter, r *http.Request) (err error)
}

// Intermediate extends and customizes the generic base connector.
// Code generated microservices then extend the intermediate.
type Intermediate struct {
	*connector.Connector
	impl ToDo
}

// NewService creates a new intermediate service.
func NewService(impl ToDo, version int) *Intermediate {
	svc := &Intermediate{
		Connector: connector.New("codegen.test"),
		impl: impl,
	}
	svc.SetVersion(version)
	svc.SetDescription(`The tester is used to test the code generator's functions.`)
	
	// Lifecycle
	svc.SetOnStartup(svc.impl.OnStartup)
	svc.SetOnShutdown(svc.impl.OnShutdown)

	// OpenAPI
	svc.Subscribe("GET", `:0/openapi.json`, svc.doOpenAPI)	

	// Functions
	svc.Subscribe(`ANY`, `:443/string-cut`, svc.doStringCut)
	svc.Subscribe(`GET`, `:443/point-distance`, svc.doPointDistance)
	svc.Subscribe(`ANY`, `:443/shift-point`, svc.doShiftPoint)
	svc.Subscribe(`ANY`, `:443/sub-array-range/{max}`, svc.doSubArrayRange)
	svc.Subscribe(`ANY`, `:443/sum-two-integers`, svc.doSumTwoIntegers)
	svc.Subscribe(`GET`, `:443/function-path-arguments/fixed/{named}/{}/{suffix+}`, svc.doFunctionPathArguments)
	svc.Subscribe(`GET`, `:443/non-string-path-arguments/fixed/{named}/{}/{suffix+}`, svc.doNonStringPathArguments)
	svc.Subscribe(`GET`, `:443/unnamed-function-path-arguments/{}/foo/{}/bar/{+}`, svc.doUnnamedFunctionPathArguments)
	svc.Subscribe(`ANY`, `:443/path-arguments-priority/{foo}`, svc.doPathArgumentsPriority)

	// Webs
	svc.Subscribe(`ANY`, `:443/echo`, svc.impl.Echo)
	svc.Subscribe(`ANY`, `:443/web-path-arguments/fixed/{named}/{}/{suffix+}`, svc.impl.WebPathArguments)
	svc.Subscribe(`GET`, `:443/unnamed-web-path-arguments/{}/foo/{}/bar/{+}`, svc.impl.UnnamedWebPathArguments)

	// Resources file system
	svc.SetResFS(resources.FS)

	return svc
}

// doOpenAPI renders the OpenAPI document of the microservice.
func (svc *Intermediate) doOpenAPI(w http.ResponseWriter, r *http.Request) error {
	oapiSvc := openapi.Service{
		ServiceName: svc.Hostname(),
		Description: svc.Description(),
		Version:     svc.Version(),
		Endpoints:   []*openapi.Endpoint{},
		RemoteURI:   frame.Of(r).XForwardedFullURL(),
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `StringCut`,
			Method:      `ANY`,
			Path:        `:443/string-cut`,
			Summary:     `StringCut(s string, sep string) (before string, after string, found bool)`,
			Description: `StringCut tests a standard function that takes multiple input arguments and returns multiple values.`,
			InputArgs: struct {
				S string `json:"s"`
				Sep string `json:"sep"`
			}{},
			OutputArgs: struct {
				Before string `json:"before"`
				After string `json:"after"`
				Found bool `json:"found"`
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `PointDistance`,
			Method:      `GET`,
			Path:        `:443/point-distance`,
			Summary:     `PointDistance(p1 XYCoord, p2 *XYCoord) (d float64)`,
			Description: `PointDistance tests passing non-primitive types via query arguments.`,
			InputArgs: struct {
				P1 testerapi.XYCoord `json:"p1"`
				P2 *testerapi.XYCoord `json:"p2"`
			}{},
			OutputArgs: struct {
				D float64 `json:"d"`
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `ShiftPoint`,
			Method:      `ANY`,
			Path:        `:443/shift-point`,
			Summary:     `ShiftPoint(p *XYCoord, x float64, y float64) (shifted *XYCoord)`,
			Description: `ShiftPoint tests passing pointers to non-primitive types.`,
			InputArgs: struct {
				P *testerapi.XYCoord `json:"p"`
				X float64 `json:"x"`
				Y float64 `json:"y"`
			}{},
			OutputArgs: struct {
				Shifted *testerapi.XYCoord `json:"shifted"`
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `SubArrayRange`,
			Method:      `ANY`,
			Path:        `:443/sub-array-range/{max}`,
			Summary:     `SubArrayRange(httpRequestBody []int, min int, max int) (httpResponseBody []int, httpStatusCode int)`,
			Description: `SubArrayRange tests sending arguments as the entire request and response bodies.
An httpRequestBody argument allows sending other arguments via query or path.
An httpResponseBody argument prevents returning additional values, except for the status code.`,
			InputArgs: struct {
				HTTPRequestBody []int `json:"httpRequestBody"`
				Min int `json:"min"`
				Max int `json:"max"`
			}{},
			OutputArgs: struct {
				HTTPResponseBody []int `json:"httpResponseBody"`
				HTTPStatusCode int `json:"-"`
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `SumTwoIntegers`,
			Method:      `ANY`,
			Path:        `:443/sum-two-integers`,
			Summary:     `SumTwoIntegers(x int, y int) (sum int, httpStatusCode int)`,
			Description: `SumTwoIntegers tests returning a status code from a function.`,
			InputArgs: struct {
				X int `json:"x"`
				Y int `json:"y"`
			}{},
			OutputArgs: struct {
				Sum int `json:"sum"`
				HTTPStatusCode int `json:"-"`
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `FunctionPathArguments`,
			Method:      `GET`,
			Path:        `:443/function-path-arguments/fixed/{named}/{}/{suffix+}`,
			Summary:     `FunctionPathArguments(named string, path2 string, suffix string) (joined string)`,
			Description: `FunctionPathArguments tests path arguments in functions.`,
			InputArgs: struct {
				Named string `json:"named"`
				Path2 string `json:"path2"`
				Suffix string `json:"suffix"`
			}{},
			OutputArgs: struct {
				Joined string `json:"joined"`
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `NonStringPathArguments`,
			Method:      `GET`,
			Path:        `:443/non-string-path-arguments/fixed/{named}/{}/{suffix+}`,
			Summary:     `NonStringPathArguments(named int, path2 bool, suffix float64) (joined string)`,
			Description: `NonStringPathArguments tests path arguments that are not strings.`,
			InputArgs: struct {
				Named int `json:"named"`
				Path2 bool `json:"path2"`
				Suffix float64 `json:"suffix"`
			}{},
			OutputArgs: struct {
				Joined string `json:"joined"`
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `UnnamedFunctionPathArguments`,
			Method:      `GET`,
			Path:        `:443/unnamed-function-path-arguments/{}/foo/{}/bar/{+}`,
			Summary:     `UnnamedFunctionPathArguments(path1 string, path2 string, path3 string) (joined string)`,
			Description: `UnnamedFunctionPathArguments tests path arguments that are not named.`,
			InputArgs: struct {
				Path1 string `json:"path1"`
				Path2 string `json:"path2"`
				Path3 string `json:"path3"`
			}{},
			OutputArgs: struct {
				Joined string `json:"joined"`
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `function`,
			Name:        `PathArgumentsPriority`,
			Method:      `ANY`,
			Path:        `:443/path-arguments-priority/{foo}`,
			Summary:     `PathArgumentsPriority(foo string) (echo string)`,
			Description: `PathArgumentsPriority tests the priority of path arguments in functions.`,
			InputArgs: struct {
				Foo string `json:"foo"`
			}{},
			OutputArgs: struct {
				Echo string `json:"echo"`
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `web`,
			Name:        `Echo`,
			Method:      `ANY`,
			Path:        `:443/echo`,
			Summary:     `Echo()`,
			Description: `Echo tests a typical web handler.`,
			InputArgs: struct {
			}{},
			OutputArgs: struct {
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `web`,
			Name:        `WebPathArguments`,
			Method:      `ANY`,
			Path:        `:443/web-path-arguments/fixed/{named}/{}/{suffix+}`,
			Summary:     `WebPathArguments()`,
			Description: `WebPathArguments tests path arguments in web handlers.`,
			InputArgs: struct {
			}{},
			OutputArgs: struct {
			}{},
		})
	}
	if r.URL.Port() == "443" || "443" == "0" {
		oapiSvc.Endpoints = append(oapiSvc.Endpoints, &openapi.Endpoint{
			Type:        `web`,
			Name:        `UnnamedWebPathArguments`,
			Method:      `GET`,
			Path:        `:443/unnamed-web-path-arguments/{}/foo/{}/bar/{+}`,
			Summary:     `UnnamedWebPathArguments()`,
			Description: `UnnamedWebPathArguments tests path arguments that are not named.`,
			InputArgs: struct {
			}{},
			OutputArgs: struct {
			}{},
		})
	}

	if len(oapiSvc.Endpoints) == 0 {
		w.WriteHeader(http.StatusNotFound)
		return nil
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	b, err := json.MarshalIndent(&oapiSvc, "", "    ")
	if err != nil {
		return errors.Trace(err)
	}
	_, err = w.Write(b)
	return errors.Trace(err)
}

// doOnConfigChanged is called when the config of the microservice changes.
func (svc *Intermediate) doOnConfigChanged(ctx context.Context, changed func(string) bool) (err error) {
	return nil
}

// doStringCut handles marshaling for the StringCut function.
func (svc *Intermediate) doStringCut(w http.ResponseWriter, r *http.Request) error {
	var i testerapi.StringCutIn
	var o testerapi.StringCutOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/string-cut`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/string-cut`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.Before, o.After, o.Found, err = svc.impl.StringCut(
		r.Context(),
		i.S,
		i.Sep,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "    ")
	}
	err = encoder.Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doPointDistance handles marshaling for the PointDistance function.
func (svc *Intermediate) doPointDistance(w http.ResponseWriter, r *http.Request) error {
	var i testerapi.PointDistanceIn
	var o testerapi.PointDistanceOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/point-distance`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/point-distance`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.D, err = svc.impl.PointDistance(
		r.Context(),
		i.P1,
		i.P2,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "    ")
	}
	err = encoder.Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doShiftPoint handles marshaling for the ShiftPoint function.
func (svc *Intermediate) doShiftPoint(w http.ResponseWriter, r *http.Request) error {
	var i testerapi.ShiftPointIn
	var o testerapi.ShiftPointOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/shift-point`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/shift-point`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.Shifted, err = svc.impl.ShiftPoint(
		r.Context(),
		i.P,
		i.X,
		i.Y,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "    ")
	}
	err = encoder.Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doSubArrayRange handles marshaling for the SubArrayRange function.
func (svc *Intermediate) doSubArrayRange(w http.ResponseWriter, r *http.Request) error {
	var i testerapi.SubArrayRangeIn
	var o testerapi.SubArrayRangeOut
	err := httpx.ParseRequestBody(r, &i.HTTPRequestBody)
	if err != nil {
		return errors.Trace(err)
	}
	err = httpx.DecodeDeepObject(r.URL.Query(), &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/sub-array-range/{max}`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/sub-array-range/{max}`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.HTTPResponseBody, o.HTTPStatusCode, err = svc.impl.SubArrayRange(
		r.Context(),
		i.HTTPRequestBody,
		i.Min,
		i.Max,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(o.HTTPStatusCode)
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "    ")
	}
	err = encoder.Encode(o.HTTPResponseBody)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doSumTwoIntegers handles marshaling for the SumTwoIntegers function.
func (svc *Intermediate) doSumTwoIntegers(w http.ResponseWriter, r *http.Request) error {
	var i testerapi.SumTwoIntegersIn
	var o testerapi.SumTwoIntegersOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/sum-two-integers`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/sum-two-integers`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.Sum, o.HTTPStatusCode, err = svc.impl.SumTwoIntegers(
		r.Context(),
		i.X,
		i.Y,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(o.HTTPStatusCode)
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "    ")
	}
	err = encoder.Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doFunctionPathArguments handles marshaling for the FunctionPathArguments function.
func (svc *Intermediate) doFunctionPathArguments(w http.ResponseWriter, r *http.Request) error {
	var i testerapi.FunctionPathArgumentsIn
	var o testerapi.FunctionPathArgumentsOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/function-path-arguments/fixed/{named}/{}/{suffix+}`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/function-path-arguments/fixed/{named}/{}/{suffix+}`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.Joined, err = svc.impl.FunctionPathArguments(
		r.Context(),
		i.Named,
		i.Path2,
		i.Suffix,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "    ")
	}
	err = encoder.Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doNonStringPathArguments handles marshaling for the NonStringPathArguments function.
func (svc *Intermediate) doNonStringPathArguments(w http.ResponseWriter, r *http.Request) error {
	var i testerapi.NonStringPathArgumentsIn
	var o testerapi.NonStringPathArgumentsOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/non-string-path-arguments/fixed/{named}/{}/{suffix+}`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/non-string-path-arguments/fixed/{named}/{}/{suffix+}`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.Joined, err = svc.impl.NonStringPathArguments(
		r.Context(),
		i.Named,
		i.Path2,
		i.Suffix,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "    ")
	}
	err = encoder.Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doUnnamedFunctionPathArguments handles marshaling for the UnnamedFunctionPathArguments function.
func (svc *Intermediate) doUnnamedFunctionPathArguments(w http.ResponseWriter, r *http.Request) error {
	var i testerapi.UnnamedFunctionPathArgumentsIn
	var o testerapi.UnnamedFunctionPathArgumentsOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/unnamed-function-path-arguments/{}/foo/{}/bar/{+}`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/unnamed-function-path-arguments/{}/foo/{}/bar/{+}`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.Joined, err = svc.impl.UnnamedFunctionPathArguments(
		r.Context(),
		i.Path1,
		i.Path2,
		i.Path3,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "    ")
	}
	err = encoder.Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}

// doPathArgumentsPriority handles marshaling for the PathArgumentsPriority function.
func (svc *Intermediate) doPathArgumentsPriority(w http.ResponseWriter, r *http.Request) error {
	var i testerapi.PathArgumentsPriorityIn
	var o testerapi.PathArgumentsPriorityOut
	err := httpx.ParseRequestData(r, &i)
	if err != nil {
		return errors.Trace(err)
	}
	if strings.ContainsAny(`:443/path-arguments-priority/{foo}`, "{}") {
		pathArgs, err := httpx.ExtractPathArguments(httpx.JoinHostAndPath("host", `:443/path-arguments-priority/{foo}`), r.URL.Path)
		if err != nil {
			return errors.Trace(err)
		}
		err = httpx.DecodeDeepObject(pathArgs, &i)
		if err != nil {
			return errors.Trace(err)
		}
	}
	o.Echo, err = svc.impl.PathArgumentsPriority(
		r.Context(),
		i.Foo,
	)
	if err != nil {
		return err // No trace
	}
	w.Header().Set("Content-Type", "application/json")
	encoder := json.NewEncoder(w)
	if svc.Deployment() == connector.LOCAL {
		encoder.SetIndent("", "    ")
	}
	err = encoder.Encode(o)
	if err != nil {
		return errors.Trace(err)
	}
	return nil
}
