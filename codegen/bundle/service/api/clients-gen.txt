// Code generated by Microbus. DO NOT EDIT.

/*
Package {{ .PackagePathSuffix }}api implements the public API of the {{ .General.Host }} microservice,
including clients and data structures.
{{- if .General.Description }}

{{ .General.Description }}
{{- end }}
*/
package {{ .PackagePathSuffix }}api

import (
	"context"
	"encoding/json"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/microbus-io/fabric/errors"
	"github.com/microbus-io/fabric/httpx"
	"github.com/microbus-io/fabric/pub"
	"github.com/microbus-io/fabric/service"
)

var (
	_ context.Context
	_ *json.Decoder
	_ io.Reader
	_ *http.Request
	_ *url.URL
	_ strings.Reader
	_ time.Duration
	_ *errors.TracedError
	_ *httpx.BodyReader
	_ pub.Option
)

// Hostname is the default hostname of the microservice: {{ .General.Host }}.
const Hostname = "{{ .General.Host }}"

// Fully-qualified URLs of the microservice's endpoints.
var (
{{- range (JoinHandlers .Functions .Webs) }}
	URLOf{{ .Name }} = httpx.JoinHostAndPath(Hostname, `{{ .Path }}`)
{{- end }}
)

// Client is a lightweight proxy for making unicast calls to the {{ .General.Host }} microservice.
type Client struct {
	svc  service.Publisher
	host string
	opts []pub.Option
}

// NewClient creates a new unicast client proxy to the {{ .General.Host }} microservice.
func NewClient(caller service.Publisher) Client {
	return Client{
		svc:  caller,
		host: "{{ .General.Host }}",
	}
}

// ForHost returns a copy of the client with a different hostname to be applied to requests.
func (_c Client) ForHost(host string) Client {
	return Client{
		svc:  _c.svc,
		host: host,
		opts: _c.opts,
	}
}

// WithOptions returns a copy of the client with options to be applied to requests.
func (_c Client) WithOptions(opts ...pub.Option) Client {
	return Client{
		svc:  _c.svc,
		host: _c.host,
		opts: append(_c.opts, opts...),
	}
}

// MulticastClient is a lightweight proxy for making multicast calls to the {{ .General.Host }} microservice.
type MulticastClient struct {
	svc  service.Publisher
	host string
	opts []pub.Option
}

// NewMulticastClient creates a new multicast client proxy to the {{ .General.Host }} microservice.
func NewMulticastClient(caller service.Publisher) MulticastClient {
	return MulticastClient{
		svc:  caller,
		host: "{{ .General.Host }}",
	}
}

// ForHost returns a copy of the client with a different hostname to be applied to requests.
func (_c MulticastClient) ForHost(host string) MulticastClient {
	return MulticastClient{
		svc:  _c.svc,
		host: host,
		opts: _c.opts,
	}
}

// WithOptions returns a copy of the client with options to be applied to requests.
func (_c MulticastClient) WithOptions(opts ...pub.Option) MulticastClient {
	return MulticastClient{
		svc:  _c.svc,
		host: _c.host,
		opts: append(_c.opts, opts...),
	}
}

{{- if .Events }}

// MulticastTrigger is a lightweight proxy for triggering the events of the {{ .General.Host }} microservice.
type MulticastTrigger struct {
	svc  service.Publisher
	host string
	opts []pub.Option
}

// NewMulticastTrigger creates a new multicast trigger of events of the {{ .General.Host }} microservice.
func NewMulticastTrigger(caller service.Publisher) MulticastTrigger {
	return MulticastTrigger{
		svc:  caller,
		host: "{{ .General.Host }}",
	}
}

// ForHost returns a copy of the trigger with a different hostname to be applied to requests.
func (_c MulticastTrigger) ForHost(host string) MulticastTrigger {
	return MulticastTrigger{
		svc:  _c.svc,
		host: host,
		opts: _c.opts,
	}
}

// WithOptions returns a copy of the trigger with options to be applied to requests.
func (_c MulticastTrigger) WithOptions(opts ...pub.Option) MulticastTrigger {
	return MulticastTrigger{
		svc:  _c.svc,
		host: _c.host,
		opts: append(_c.opts, opts...),
	}
}

// Hook assists in the subscription to the events of the {{ .General.Host }} microservice.
type Hook struct {
	svc  service.Subscriber
	host string
}

// NewHook creates a new hook to the events of the {{ .General.Host }} microservice.
func NewHook(listener service.Subscriber) Hook {
	return Hook{
		svc:  listener,
		host: "{{ .General.Host }}",
	}
}

// ForHost returns a copy of the hook with a different hostname to be applied to the subscription.
func (_c Hook) ForHost(host string) Hook {
	return Hook{
		svc:  _c.svc,
		host: host,
	}
}
{{- end}}
