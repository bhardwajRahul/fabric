{{ if .Webs }}
// errChan returns a response channel with a single error response.
func (_c MulticastClient) errChan(err error) <-chan *pub.Response {
	ch := make(chan *pub.Response, 1)
	ch <- pub.NewErrorResponse(err)
	close(ch)
	return ch
}
{{ end }}

{{- range .Webs }}

{{- if eq .Method "ANY" }}
/*
{{ .Description }}

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c Client) {{ .Name }}(ctx context.Context, method string, relURL string, contentType string, body any) (res *http.Response, err error) {
	if method == "" {
		method = "{{ if eq .Method "ANY" }}POST{{ else }}{{ .Method }}{{ end }}"
	}
	res, err = _c.svc.Request(
		ctx,
		pub.Method(method),
		pub.URL(URLOf{{ .Name }}),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
	return res, err // No trace
}

/*
{{ .Description }}

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c MulticastClient) {{ .Name }}(ctx context.Context, method string, relURL string, contentType string, body any) <-chan *pub.Response {
	if method == "" {
		method = "{{ if eq .Method "ANY" }}POST{{ else }}{{ .Method }}{{ end }}"
	}
	return _c.svc.Publish(
		ctx,
		pub.Method(method),
		pub.URL(URLOf{{ .Name }}),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
}
{{ else if .MethodWithBody }}
/*
{{ .Description }}

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c Client) {{ .Name }}(ctx context.Context, relURL string, contentType string, body any) (res *http.Response, err error) {
	res, err = _c.svc.Request(
		ctx,
		pub.Method("{{ .Method }}"),
		pub.URL(URLOf{{ .Name }}),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
	return res, err // No trace
}

/*
{{ .Description }}

If a URL is provided, it is resolved relative to the URL of the endpoint.
If the body if of type io.Reader, []byte or string, it is serialized in binary form.
If it is of type url.Values, it is serialized as form data. All other types are serialized as JSON.
If a content type is not explicitly provided, an attempt will be made to derive it from the body.
*/
func (_c MulticastClient) {{ .Name }}_{{ CapitalizeIdentifier (ToLower .Method) }}(ctx context.Context, relURL string, contentType string, body any) <-chan *pub.Response {
	return _c.svc.Publish(
		ctx,
		pub.Method("{{ .Method }}"),
		pub.URL(URLOf{{ .Name }}),
		pub.RelativeURL(relURL),
		pub.ContentType(contentType),
		pub.Body(body),
		pub.Options(_c.opts...),
	)
}
{{ else }}
/*
{{ .Description }}

If a URL is provided, it is resolved relative to the URL of the endpoint.
*/
func (_c Client) {{ .Name }}(ctx context.Context, relURL string) (res *http.Response, err error) {
	res, err = _c.svc.Request(
		ctx,
		pub.Method("{{ .Method }}"),
		pub.URL(URLOf{{ .Name }}),
		pub.RelativeURL(relURL),
		pub.Options(_c.opts...),
	)
	return res, err // No trace
}

/*
{{ .Description }}

If a URL is provided, it is resolved relative to the URL of the endpoint.
*/
func (_c MulticastClient) {{ .Name }}(ctx context.Context, relURL string) <-chan *pub.Response {
	return _c.svc.Publish(
		ctx,
		pub.Method("{{ .Method }}"),
		pub.URL(URLOf{{ .Name }}),
		pub.RelativeURL(relURL),
		pub.Options(_c.opts...),
	)
}
{{ end }}
{{- end }}