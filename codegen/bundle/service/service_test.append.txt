{{- $pkg := .PackagePathSuffix }}{{- $svc := . }}

{{- range .Configs }}{{ if .Callback }}{{ if not .Exists }}
func Test{{ CapitalizeIdentifier $pkg }}_OnChanged{{ .Name }}(t *testing.T) {
	t.Parallel()
	ctx := t.Context()
	_ = ctx

	// Initialize the microservice under test
	svc := NewService()
	{{- range $svc.Configs }}
	// svc.Set{{ .Name }}({{ .Out "name" }})
	{{- end}}

	// Run the testing app
	app := application.NewTesting()
	app.Add(
		// Add microservices or mocks required for this test
		svc,
	)
	app.RunInTest(t)

	/*
		Recommended pattern:

		t.Run("subtest_name", func(t *testing.T) {
			tt := testarossa.For(t)

			err := svc.Set{{ .Name }}({{ .Out "name" }})
			tt.NoError(err)
		})
	*/

	// TO{{/**/}}DO: Test OnChanged{{ .Name }}
}
{{ end }}{{ end }}{{ end }}

{{- range .Functions }}{{- if not .Exists }}
{{- $t := .Signature.TestingT }}
func Test{{ CapitalizeIdentifier $pkg }}_{{ .Name }}(t *testing.T) {
	t.Parallel()
	ctx := t.Context()
	_ = ctx

	// Initialize the microservice under test
	svc := NewService()
	{{- range $svc.Configs }}
	// svc.Set{{ .Name }}({{ .Out "name" }})
	{{- end}}

	// Initialize the testers
	tester := connector.New("{{ ToLower $pkg}}.{{ ToLower .Name }}.tester")
	client := {{ $pkg }}api.NewClient(tester)
	_ = client

	// Run the testing app
	app := application.NewTesting()
	app.Add(
		// Add microservices or mocks required for this test
		svc,
		tester,
	)
	app.RunInTest(t)

	/*
		Recommended pattern:

		t.Run("subtest_name", func(t *testing.T) {
			tt := testarossa.For(t)

			{{ if .Actor }}// Actor claims required: {{ .Actor }}
			{{ end }}
			{{- .Out "name," -}} err := client{{ if .Actor }}.WithOptions(pub.Actor(actor)){{ end }}.{{ .Name }}(ctx {{- .In ", name" }})
			{{- if .Signature.OutputArgs }}
			tt.Expect(
				{{- range .Signature.OutputArgs }}
				{{ .Name }}, expected{{ CapitalizeIdentifier .Name }},
				{{- end }}
				err, nil,
			)
			{{- else }}
			tt.NoError(err)
			{{- end }}
		})
	*/

	// TO{{/**/}}DO: Test {{ .Name }}
}
{{ end }}{{ end }}

{{- range .Events }}{{- if not .Exists }}
{{- $t := .Signature.TestingT }}
func Test{{ CapitalizeIdentifier $pkg }}_{{ .Name }}(t *testing.T) {
	t.Parallel()
	ctx := t.Context()
	_ = ctx

	// Initialize the microservice under test
	svc := NewService()
	{{- range $svc.Configs }}
	// svc.Set{{ .Name }}({{ .Out "name" }})
	{{- end}}

	// Initialize the testers
	tester := connector.New("{{ ToLower $pkg}}.{{ ToLower .Name }}.tester")
	client := {{ $pkg }}api.NewClient(tester)
	trigger := {{ $pkg }}api.NewMulticastTrigger(tester)
	hook := {{ $pkg }}api.NewHook(tester)
	_ = client
	_ = trigger
	_ = hook

	// Run the testing app
	app := application.NewTesting()
	app.Add(
		// Add microservices or mocks required for this test
		svc,
		tester,
	)
	app.RunInTest(t)

	/*
		Recommended pattern:

		t.Run("subtest_name", func(t *testing.T) {
			tt := testarossa.For(t)

			hook.{{ .Name }}(func(ctx context.Context {{- .In ", name type"}}) ({{ .Out "name type," -}} err error) {
				{{- if .Signature.InputArgs }}
				tt.Expect(
					{{- range .Signature.InputArgs }}
					{{ .Name }}, expected{{ CapitalizeIdentifier .Name }},
					{{- end }}
				)
				{{- end }}
				// Implement event sink
				return {{ .Out "name," -}} err
			})
			defer hook.{{ .Name }}(nil)

			for e := range trigger.{{ .Name }}(ctx {{- .In ", name" }}) {
				if frame.Of(e.HTTPResponse).FromHost() == tester.Hostname() {
					{{ .Out "name," -}} err := e.Get()
					{{- if .Signature.OutputArgs }}
					tt.Expect(
						{{- range .Signature.OutputArgs }}
						{{ .Name }}, expected{{ CapitalizeIdentifier .Name }},
						{{- end }}
						err, nil,
					)
					{{- else }}
					tt.NoError(err)
					{{- end }}
				}
			}
		})
	*/

	// TO{{/**/}}DO: Test {{ .Name }}
}
{{ end }}{{ end }}

{{- range .Sinks }}{{- if not .Exists }}
{{- $t := .Signature.TestingT }}
func Test{{ CapitalizeIdentifier $pkg }}_{{ .Name }}(t *testing.T) {
	t.Parallel()
	ctx := t.Context()
	_ = ctx

	// Initialize the microservice under test
	svc := NewService()
	{{- range $svc.Configs }}
	// svc.Set{{ .Name }}({{ .Out "name" }})
	{{- end}}

	// Initialize the testers
	tester := connector.New("{{ ToLower $pkg}}.{{ ToLower .Name }}.tester")
	client := {{ $pkg }}api.NewClient(tester)
	{{ ToLower .SourceSuffix }}Trigger := {{ .SourceSuffix }}api.NewMulticastTrigger(tester)
	_ = client
	_ = {{ ToLower .SourceSuffix }}Trigger

	// Run the testing app
	app := application.NewTesting()
	app.Add(
		// Add microservices or mocks required for this test
		svc,
		tester,
	)
	app.RunInTest(t)

	/*
		Recommended pattern:

		t.Run("subtest_name", func(t *testing.T) {
			tt := testarossa.For(t)

			{{ if .Actor }}// Actor claims required: {{ .Actor }}
			{{ end -}}
			for e := range {{ ToLower .SourceSuffix }}Trigger{{ if .Actor }}.WithOptions(pub.Actor(actor)){{ end }}.{{ if .Event }}{{ .Event }}{{ else }}{{ .Name }}{{ end }}(ctx {{- .In ", name" }}) {
				{{ .Out "name," -}} err := e.Get()
				if frame.Of(e.HTTPResponse).FromHost() == svc.Hostname() {
					{{- if .Signature.OutputArgs }}
					tt.Expect(
						{{- range .Signature.OutputArgs }}
						{{ .Name }}, expected{{ CapitalizeIdentifier .Name }},
						{{- end }}
						err, nil,
					)
					{{- else }}
					tt.NoError(err)
					{{- end }}
				}
			}
		})
	*/

	// TO{{/**/}}DO: Test {{ .Name }}
}
{{ end }}{{ end }}

{{- range .Webs }}{{- if not .Exists }}
func Test{{ CapitalizeIdentifier $pkg }}_{{ .Name }}(t *testing.T) {
	t.Parallel()
	ctx := t.Context()
	_ = ctx

	// Initialize the microservice under test
	svc := NewService()
	{{- range $svc.Configs }}
	// svc.Set{{ .Name }}({{ .Out "name" }})
	{{- end}}

	// Initialize the testers
	tester := connector.New("{{ ToLower $pkg}}.{{ ToLower .Name }}.tester")
	client := {{ $pkg }}api.NewClient(tester)
	_ = client

	// Run the testing app
	app := application.NewTesting()
	app.Add(
		// Add microservices or mocks required for this test
		svc,
		tester,
	)
	app.RunInTest(t)

	/*
		Recommended patterns:

		t.Run("subtest_name", func(t *testing.T) {
			tt := testarossa.For(t)

			{{ if .Actor }}// Actor claims required: {{ .Actor }}
			{{ end -}}
			res, err := client{{ if .Actor }}.WithOptions(pub.Actor(actor)){{ end }}.{{ .Name }}
			{{- if eq .Method "ANY" -}}
			(ctx, method, "", contentType, payload)
			{{- else if .MethodWithBody -}}
			(ctx, "", contentType, payload)
			{{- else -}}
			(ctx, "")
			{{- end }}
			if tt.NoError(err) && tt.Expect(res.StatusCode, http.StatusOK) {
				body, err := io.ReadAll(res.Body)
				if tt.NoError(err) {
					tt.HTMLMatch(body, "DIV.class > DIV#id", "")
					tt.Contains(body, "")
				}
			}
		})
	*/

	// TO{{/**/}}DO: Test {{ .Name }}
}
{{ end }}{{ end }}

{{- range .Tickers }}{{- if not .Exists }}
{{- $t := .Signature.TestingT }}
func Test{{ CapitalizeIdentifier $pkg }}_{{ .Name }}(t *testing.T) {
	t.Parallel()
	ctx := t.Context()
	_ = ctx

	// Initialize the microservice under test
	svc := NewService()
	{{- range $svc.Configs }}
	// svc.Set{{ .Name }}({{ .Out "name" }})
	{{- end}}

	// Run the testing app
	app := application.NewTesting()
	app.Add(
		// Add microservices or mocks required for this test
		svc,
	)
	app.RunInTest(t)

	/*
		Recommended pattern:

		t.Run("subtest_name", func(t *testing.T) {
			tt := testarossa.For(t)

			err := svc.{{ .Name }}(ctx)
			tt.NoError(err)
		})
	*/

	// TO{{/**/}}DO: Test {{ .Name }}
}
{{ end }}{{ end }}

{{- range .Metrics }}{{ if .Callback }}{{ if not .Exists }}
func Test{{ CapitalizeIdentifier $pkg }}_OnObserve{{ .Name }}(t *testing.T) {
	t.Parallel()
	ctx := t.Context()
	_ = ctx

	// Initialize the microservice under test
	svc := NewService()
	{{- range $svc.Configs }}
	// svc.Set{{ .Name }}({{ .Out "name" }})
	{{- end}}

	// Run the testing app
	app := application.NewTesting()
	app.Add(
		// Add microservices or mocks required for this test
		svc,
	)
	app.RunInTest(t)

	/*
		Recommended pattern:

		t.Run("subtest_name", func(t *testing.T) {
			tt := testarossa.For(t)

			err := svc.OnObserve{{ .Name }}(ctx)
			tt.NoError(err)
		})
	*/

	// TO{{/**/}}DO: Test OnObserve{{ .Name }}
}
{{ end }}{{ end }}{{ end }}