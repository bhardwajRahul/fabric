{{- $pkg := CapitalizeIdentifier .PackageSuffix }}
{{- range (JoinHandlers .Functions .Sinks) }}{{- if not .Exists }}
{{- $t := .Signature.TestingT }}
func Test{{ $pkg }}_{{ .Name }}(t *testing.T) {
	// TO{{/**/}}DO: Test {{ .Name }}
	t.Parallel()
	/*
		{{ .Name }}(t, ctx {{- range .Signature.InputArgs }}, {{ .Name }}{{ end }}).
			{{- if .Signature.OutputArgs }}
			Expect({{ range $i, $e := .Signature.OutputArgs }}{{ if $i }}, {{ end }}{{ .Name }}{{ end }}).
			{{- end }}
			NoError()
	*/
	// ctx := Context(t)
}
{{ end }}{{ end }}

{{- range .Events }}{{- if not .Exists }}
{{- $t := .Signature.TestingT }}
func Test{{ $pkg }}_{{ .Name }}(t *testing.T) {
	// TO{{/**/}}DO: Test {{ .Name }}
	t.Parallel()
	/*
		{{ .Name }}(t, {{ range .Signature.OutputArgs }}{{ .Name }}, {{ end }}err)
			{{- if .Signature.InputArgs }}.
			Expect({{ range $i, $e := .Signature.InputArgs }}{{ if $i }}, {{ end }}{{ .Name }}{{ end }}).
			{{- end }}
	*/
	// ctx := Context(t)
}
{{ end }}{{ end }}

{{- range .Webs }}{{- if not .Exists }}
func Test{{ $pkg }}_{{ .Name }}(t *testing.T) {
	// TO{{/**/}}DO: Test {{ .Name }}
	t.Parallel()
	/*
	{{- if eq .Method "*" }}
		{{ .Name }}Get(t, ctx, "").
			BodyContains(value).
			NoError()
		{{ .Name }}Post(t, ctx, "", "", body).
			BodyContains(value).
			NoError()
		{{ .Name }}(t, ctx, httpRequest).
			BodyContains(value).
			NoError()
	{{- else if .MethodWithBody }}
		{{ .Name }}Any(t, ctx, httpRequest).
			BodyContains(value).
			NoError()
		{{ .Name }}(t, ctx, "", "", body).
			BodyContains(value).
			NoError()
	{{- else }}
		{{ .Name }}Any(t, ctx, httpRequest).
			BodyContains(value).
			NoError()
		{{ .Name }}(t, ctx, "")..
			BodyContains(value).
			NoError()
	{{- end }}
	*/
	// ctx := Context(t)
}
{{ end }}{{ end }}

{{- range .Tickers }}{{ if not .Exists }}
func Test{{ $pkg }}_{{ .Name }}(t *testing.T) {
	// TO{{/**/}}DO: Test {{ .Name }}
	t.Parallel()
	/*
		{{ .Name }}(t, ctx).
			NoError()
	*/
	// ctx := Context(t)
}
{{ end }}{{ end }}

{{- range .Configs }}{{ if .Callback }}{{ if not .Exists }}
func Test{{ $pkg }}_OnChanged{{ .Name }}(t *testing.T) {
	// TO{{/**/}}DO: Test OnChanged{{ .Name }}
	t.Parallel()
	/*
		OnChanged{{ .Name }}(t, ctx).
			NoError()
	*/
	// ctx := Context(t)
}
{{ end }}{{ end }}{{ end }}