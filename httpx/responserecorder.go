/*
Copyright (c) 2022-2023 Microbus LLC and various contributors

This file and the project encapsulating it are the confidential intellectual property of Microbus LLC.
Neither may be used, copied or distributed without the express written consent of Microbus LLC.
*/

package httpx

import (
	"bytes"
	"fmt"
	"net/http"
	"strconv"
)

// ResponseRecorder is used to record HTTP responses
type ResponseRecorder struct {
	header     http.Header
	body       *bytes.Buffer
	statusCode int
}

// NewResponseRecorder creates a new response recorder
func NewResponseRecorder() *ResponseRecorder {
	return &ResponseRecorder{
		header:     make(http.Header),
		statusCode: http.StatusOK,
	}
}

// Header enables setting headers.
// It implements the http.ResponseWriter interface
func (rr *ResponseRecorder) Header() http.Header {
	return rr.header
}

// Write writes bytes to the body of the response.
// It implements the http.ResponseWriter interface
func (rr *ResponseRecorder) Write(b []byte) (int, error) {
	if rr.body == nil {
		rr.body = &bytes.Buffer{}
	}
	return rr.body.Write(b)
}

// WriteHeader writes the header to the response.
// It implements the http.ResponseWriter interface
func (rr *ResponseRecorder) WriteHeader(statusCode int) {
	rr.statusCode = statusCode
}

// Result returns the response generated by the recorder
func (rr *ResponseRecorder) Result() *http.Response {
	res := &http.Response{
		Proto:      "HTTP/1.1",
		ProtoMajor: 1,
		ProtoMinor: 1,
		StatusCode: rr.statusCode,
		Header:     rr.header,
	}
	res.Status = fmt.Sprintf("%03d %s", res.StatusCode, http.StatusText(res.StatusCode))
	if rr.body != nil {
		res.Body = NewBodyReader(rr.body.Bytes())
		res.ContentLength = int64(rr.body.Len())
	}
	rr.header.Set("Content-Length", strconv.FormatInt(res.ContentLength, 10))
	return res
}

// ContentLength returns the total number of bytes written to the body of the response.
func (rr *ResponseRecorder) ContentLength() int {
	if rr.body != nil {
		return rr.body.Len()
	}
	return 0
}

// StatusCode returns the status code set for the response.
// If unset, the default is http.StatusOK 200.
func (rr *ResponseRecorder) StatusCode() int {
	return rr.statusCode
}
